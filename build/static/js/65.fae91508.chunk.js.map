{"version":3,"sources":["views/pages/customerAssociations.jsx"],"names":["Associations","useState","association","setAssociation","associationData","setAssociationData","search","setSearch","show","setShow","useEffect","a","axios","get","baseUrl","apiUrl","results","data","getAssociations","handleSubmit","post","status","Swal","fire","message","sAssociation","filter","item","toLowerCase","includes","dataTouse","length","className","type","onClick","placeholder","onChange","event","target","value","map","s","index","key","_id","console","log","staffView","onClose","color","size","closeButton","htmlFor","id","e","currentTarget"],"mappings":"6UA8MeA,UAjJM,WAAO,IAAD,EACaC,mBAAS,CAC7CC,YAAa,KAFU,mBAClBA,EADkB,KACLC,EADK,OAIqBF,mBAAS,IAJ9B,mBAIlBG,EAJkB,KAIDC,EAJC,OAKGJ,mBAAS,IALZ,mBAKlBK,EALkB,KAKVC,EALU,OAMDN,oBAAS,GANR,mBAMlBO,EANkB,KAMZC,EANY,KAQzBC,qBAAU,WAAM,4CACd,4BAAAC,EAAA,sEACwBC,IAAMC,IAAIC,EAAQC,OAAS,sBADnD,OACQC,EADR,OAEEX,EAAmBW,EAAQC,MAF7B,4CADc,uBAAC,WAAD,wBAMdC,KACC,CAACd,IAEJ,IAAMe,EAAY,uCAAG,sBAAAR,EAAA,+EAEKC,IAAMQ,KAC1BN,EAAQC,OAAS,qBACjBb,GAJe,UAOM,MAPN,OAOLmB,OAPK,yCAQRC,IAAKC,KACV,SACA,oDACA,UAXa,OAcfD,IAAKC,KAAK,UAAW,uCAAwC,WAC7DpB,EAAe,CACbD,YAAa,KAhBA,0DAoBjBoB,IAAKC,KAAK,QAAS,UAAY,KAAIC,QAAS,SApB3B,0DAAH,qDA2BZP,EAAO,CACXQ,aAAcrB,EAAgBsB,QAAO,SAACC,GAAD,OACnCA,EAAKzB,YAAY0B,cAAcC,SAASvB,EAAOsB,mBAQ7CE,EAA8B,IAAlBxB,EAAOyB,OAAe3B,EAAkBa,EAAKQ,aAC/D,OACE,yBAAKO,UAAU,kBACb,wBAAIA,UAAU,cAAd,qBACA,uBAAGA,UAAU,UAAb,qIAEyE,IACvE,6BAHF,mBAOA,yBAAKA,UAAU,oBACb,yBAAKA,UAAU,oBACb,kBAAC,IAAD,CACEC,KAAK,SACLD,UAAU,wDACVE,QAAS,kBAAMzB,GAASD,KAH1B,iCAOA,kBAAC,IAAD,CACEwB,UAAU,kBACVC,KAAK,OACLE,YAAY,kCACZC,SAtCW,SAACC,GACpB9B,EAAU8B,EAAMC,OAAOC,UAuCjB,kBAAC,IAAD,KACE,+BACE,wBAAIP,UAAU,SACZ,6BACA,mDAGJ,+BACGF,EAAUU,KAAI,SAACC,EAAGC,GAAJ,OACb,wBAAIC,IAAKF,EAAEG,IAAKV,QAAS,kBAvCrB,SAACO,GACjBI,QAAQC,IAAIL,GAsC+BM,CAAUN,KACvC,4BAAKC,EAAQ,GACb,4BAAKD,EAAEvC,oBAOjB,kBAAC,KAAD,CACEM,KAAMA,EACNwC,QAAS,WACPvC,GAASD,IAEXyC,MAAM,UACNC,KAAK,MAEL,kBAAC,KAAD,CAAcC,aAAW,GACvB,kBAAC,KAAD,wCAEF,kBAAC,KAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAanB,UAAU,QACrB,kBAAC,KAAD,CAAQoB,QAAQ,WAAWpB,UAAU,uBAArC,uBAGA,kBAAC,IAAD,CACEC,KAAK,OACLD,UAAU,wBACVqB,GAAG,WACHd,MAAOrC,EAAYA,YACnBkC,SAAU,SAACkB,GAAD,OACRnD,EAAe,2BACVD,GADS,IAEZA,YAAaoD,EAAEC,cAAchB,aAMrC,yBAAKP,UAAU,2CACb,kBAAC,IAAD,CACEA,UAAU,kDACVE,QAASf,GAFX","file":"static/js/65.fae91508.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { Link, useNavigate, Navigate } from 'react-router-dom'\nimport axios from 'axios'\nimport moment from 'moment'\nimport baseUrl from '../../config.json'\nimport auth from '../../components/services/authService'\nimport Joi from 'joi-browser'\nimport Swal from 'sweetalert2'\n\nimport {\n  CBadge,\n  CCard,\n  CCardBody,\n  //CCardHeader,\n  CCol,\n  CDataTable,\n  CRow,\n  CButton,\n  CModal,\n  CModalFooter,\n  CModalHeader,\n  CModalBody,\n  CCardHeader,\n  CInputGroupAppend,\n  CInputGroupPrepend,\n  CDropdownItem,\n  CForm,\n  //CCardFooter,\n  CDropdownToggle,\n  //CInputRadio,\n  CDropdown,\n  CModalTitle,\n  //CFormText,\n  //CTextarea,\n  CFormGroup,\n  CLabel,\n  // CSwitch,\n  CInput,\n  //CInputFile,\n  CSelect,\n  CDropdownMenu,\n  //CCardFooter,\n  CInputGroup,\n  //CForm,\n} from '@coreui/react'\n\nimport {\n  Row,\n  Col,\n  Table,\n  Progress,\n  Button,\n  UncontrolledButtonDropdown,\n  DropdownMenu,\n  DropdownToggle,\n  DropdownItem,\n  Input,\n  Label,\n  Badge,\n} from 'reactstrap'\n\nconst Associations = () => {\n  const [association, setAssociation] = useState({\n    association: '',\n  })\n  const [associationData, setAssociationData] = useState([])\n  const [search, setSearch] = useState('')\n  const [show, setShow] = useState(false)\n\n  useEffect(() => {\n    async function getAssociations() {\n      const results = await axios.get(baseUrl.apiUrl + '/setup/association')\n      setAssociationData(results.data)\n      //console.log(customers);\n    }\n    getAssociations()\n  }, [associationData])\n\n  const handleSubmit = async () => {\n    try {\n      const results = await axios.post(\n        baseUrl.apiUrl + '/setup/association',\n        association,\n      )\n\n      if (results.status !== 200) {\n        return Swal.fire(\n          'Failed',\n          'Submission Failed ! Check Entries and try again !',\n          'error',\n        )\n      } else {\n        Swal.fire('Success', 'Association/Group Saved Successfully', 'success')\n        setAssociation({\n          association: '',\n        })\n      }\n    } catch (err) {\n      Swal.fire('Error', 'OOPS ! ' + err.message, 'error')\n    }\n  }\n  const handleSearch = (event) => {\n    setSearch(event.target.value)\n  }\n\n  const data = {\n    sAssociation: associationData.filter((item) =>\n      item.association.toLowerCase().includes(search.toLowerCase()),\n    ),\n  }\n\n  const staffView = (s) => {\n    console.log(s)\n  }\n\n  const dataTouse = search.length === 0 ? associationData : data.sAssociation\n  return (\n    <div className=\"col-sm-12 mt-3\">\n      <h1 className=\"centertext\">Group/Association</h1>\n      <p className=\"staffp\">\n        People and their behaviors are what deliver results to your\n        organization. Not systems, not processes, not computers, not machines.{' '}\n        <br />\n        \"Mark Hortsman\"\n      </p>\n\n      <div className=\"centreStaff row \">\n        <div className=\"table-responsive\">\n          <CButton\n            type=\"submit\"\n            className=\"btn btn-success btn-block col-sm-3 float-right btn-sm\"\n            onClick={() => setShow(!show)}\n          >\n            + Setup New Association/Group\n          </CButton>\n          <CInput\n            className=\"mt-3 mb-3 col-4\"\n            type=\"text\"\n            placeholder=\"Search with Staff Name or Phone\"\n            onChange={handleSearch}\n          />\n          <Table>\n            <thead>\n              <tr className=\"fs-sm\">\n                <th></th>\n                <th>Association/Group</th>\n              </tr>\n            </thead>\n            <tbody>\n              {dataTouse.map((s, index) => (\n                <tr key={s._id} onClick={() => staffView(s)}>\n                  <td>{index + 1}</td>\n                  <td>{s.association}</td>\n                </tr>\n              ))}\n            </tbody>\n          </Table>\n        </div>\n\n        <CModal\n          show={show}\n          onClose={() => {\n            setShow(!show)\n          }}\n          color=\"success\"\n          size=\"md\"\n        >\n          <CModalHeader closeButton>\n            <CModalTitle>SETUP | ADD ASSOCIATION/GROUP </CModalTitle>\n          </CModalHeader>\n          <CModalBody>\n            <CFormGroup>\n              <CInputGroup className=\"mt-3\">\n                <CLabel htmlFor=\"fullName\" className=\"form-Label col-sm-4\">\n                  Association / Group\n                </CLabel>\n                <CInput\n                  type=\"text\"\n                  className=\"form-control col-sm-8\"\n                  id=\"fullName\"\n                  value={association.association}\n                  onChange={(e) =>\n                    setAssociation({\n                      ...association,\n                      association: e.currentTarget.value,\n                    })\n                  }\n                />\n              </CInputGroup>\n\n              <div className=\"d-flex justify-content-center mt-3 mb-3\">\n                <CButton\n                  className=\"btn btn-danger col-sm-3 mt-3 float-right btn-md\"\n                  onClick={handleSubmit}\n                >\n                  Submit\n                </CButton>\n              </div>\n            </CFormGroup>\n          </CModalBody>\n        </CModal>\n      </div>\n    </div>\n  )\n}\n\nexport default Associations\n"],"sourceRoot":""}