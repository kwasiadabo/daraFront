{"version":3,"sources":["views/pages/register/Register.js"],"names":["Register","useState","staff","email","password","confirmPassword","userRegister","setUserRegister","history","useHistory","setStaff","search","useRef","grade","Date","setPassword","joiUserSchema","Joi","object","keys","staffId","string","required","label","minDomainSegments","tlds","allow","validateForm","result","validate","error","details","message","chars","tempPassword","i","randomNumber","Math","floor","random","length","substring","genPassword","handleSubmit","e","a","preventDefault","console","log","Swal","fire","axios","get","toUpperCase","results","data","post","fullName","isAdmin","isHeadOfUnit","isHeadOfDepartment","isSupervisor","replace","useEffect","baseUrl","apiUrl","getStaff","grades","filter","item","toLowerCase","includes","className","md","lg","xl","name","aria-label","value","onChange","currentTarget","map","s","key","id","nameOfStaff","type","placeholder","autoComplete","color","block","onClick"],"mappings":"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","file":"static/js/82.911c4af9.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from 'react'\nimport { useHistory } from 'react-router-dom'\nimport axios from 'axios'\nimport Joi from 'joi-browser'\nimport baseUrl from '../../../config.json'\n\nimport {\n  CButton,\n  CCard,\n  CCardBody,\n  CCardFooter,\n  CCol,\n  CContainer,\n  CForm,\n  CInput,\n  CInputGroup,\n  CInputGroupPrepend,\n  CInputGroupText,\n  CRow,\n  CSelect,\n} from '@coreui/react'\nimport CIcon from '@coreui/icons-react'\nimport Swal from 'sweetalert2'\n\nconst Register = () => {\n  const [userRegister, setUserRegister] = useState({\n    staff: '',\n    email: '',\n    password: '',\n    confirmPassword: '',\n  })\n  let history = useHistory()\n  const [staff, setStaff] = useState([])\n  const [search, setSearch] = useState('')\n  const dateOfAppointmentRef = useRef()\n  const [departments, setDepartment] = useState([])\n  const [grade, setGrade] = useState([])\n  const [unit, setUnit] = useState([])\n  const [deptId, setDeptId] = useState('')\n  const [appDate, setAppDate] = useState(new Date())\n  const [password, setPassword] = useState('')\n\n  const joiUserSchema = Joi.object().keys({\n    staffId: Joi.string().required().label('Staff ID'),\n    email: Joi.string().email({\n      minDomainSegments: 2,\n      tlds: { allow: ['ugmc.ug.edu.gh'] },\n    }),\n    password: Joi.string().required().label('Password'),\n    confirmPassword: Joi.string().required().label('confirm Password'),\n  })\n\n  const validateForm = () => {\n    const result = Joi.validate(userRegister, joiUserSchema)\n    if (result.error) {\n      return result.error.details[0].message\n    } else {\n      genPassword()\n      return null\n    }\n    // console.log(result);\n  }\n\n  const handleSubmit = async (e) => {\n    e.preventDefault()\n    console.log(userRegister)\n\n    if (userRegister.password !== userRegister.confirmPassword) {\n      return Swal.fire(\n        'Password Confirmation',\n        'Password Confirmation Failed',\n        'info',\n      )\n    }\n    const validate = validateForm()\n\n    if (validate === null) {\n      const results = await axios.get(\n        'https://ugmcservice.herokuapp.com/api/stafflist/' +\n          userRegister.staffId.toUpperCase() +\n          '/' +\n          userRegister.email,\n      )\n\n      if (results.data.length > 0) {\n        try {\n          await axios.post('https://ugmcservice.herokuapp.com/api/users', {\n            staffId: userRegister.staffId.toUpperCase(),\n            email: userRegister.email,\n            fullName: results.data[0].fullName,\n            password: userRegister.password,\n            confirmPassword: userRegister.confirmPassword,\n            grade: results.data[0].grade,\n            isAdmin: false,\n            isHeadOfUnit: false,\n            isHeadOfDepartment: false,\n            isSupervisor: false,\n          })\n          setUserRegister({\n            staffId: '',\n            email: '',\n            password: '',\n            confirmPassword: '',\n          })\n          Swal.fire('Success', 'Registration successful', 'success')\n          return history.replace('/')\n        } catch (ex) {\n          return Swal.fire(\n            'OOPS',\n            'Registration NOT successful. Account may already exists !',\n            'error',\n          )\n        }\n      } else {\n        return Swal.fire(\n          'OOPS',\n          'Staff details NOT found, Please check and try again or contact HR Department',\n          'error',\n        )\n      }\n    } else {\n      return Swal.fire('OOPS', validate, 'info')\n    }\n  }\n\n  useEffect(() => {\n    async function getStaff() {\n      const results = await axios.get(baseUrl.apiUrl + '/setup/staff')\n      setStaff(results.data)\n    }\n    getStaff()\n  }, [])\n\n  const handleAppDate = (sdate) => {\n    let dateSelected = new Date(sdate)\n    setAppDate(dateSelected)\n    setUserRegister({\n      ...userRegister,\n      dateOfAppointment: dateSelected,\n    })\n  }\n\n  const data = {\n    grades: grade.filter(\n      (item) =>\n        item.grade.toLowerCase().includes(search.toLowerCase()) ||\n        item.grade.includes(search.toLowerCase()),\n    ),\n  }\n\n  const dataTouse = search.length === 0 ? grade : data.grades\n\n  function genPassword() {\n    let chars = '123456789abcdefghijklmnpqrstuvwxyzABCDEFGHIJKLMNPQRSTUVWXYZ'\n    let passwordLength = 8\n    let tempPassword = ''\n    for (let i = 0; i <= passwordLength; i++) {\n      let randomNumber = Math.floor(Math.random() * chars.length)\n      tempPassword += chars.substring(randomNumber, randomNumber + 1)\n    }\n    setPassword(tempPassword)\n  }\n\n  return (\n    <div className=\"c-app c-default-layout flex-row align-items-center\">\n      <CContainer>\n        <CRow className=\"justify-content-center\">\n          <CCol md=\"9\" lg=\"7\" xl=\"6\">\n            <CCard className=\"mx-4\">\n              <CCardBody className=\"p-4\">\n                <CForm>\n                  <h1>Register</h1>\n                  <p className=\"text-muted\">Create your account</p>\n                  <CInputGroup className=\"mt-3\">\n                    <CInputGroupPrepend>\n                      <CInputGroupText>\n                        <CIcon name=\"cil-user\" />\n                      </CInputGroupText>\n                    </CInputGroupPrepend>\n                    <CSelect\n                      className=\"form-select col-sm-10\"\n                      aria-label=\"Default select example\"\n                      value={userRegister.staff}\n                      onChange={(e) =>\n                        setUserRegister({\n                          ...userRegister,\n                          staff: e.currentTarget.value,\n                        })\n                      }\n                    >\n                      <option value=\"\">Staff *</option>\n                      {staff.map((s) => (\n                        <option key={s.id} value={s.id} id={s.id}>\n                          {s.nameOfStaff}\n                        </option>\n                      ))}\n                    </CSelect>\n                  </CInputGroup>\n\n                  <CInputGroup className=\"mb-3\">\n                    <CInputGroupPrepend>\n                      <CInputGroupText>\n                        <CIcon name=\"cil-user\" />\n                      </CInputGroupText>\n                    </CInputGroupPrepend>\n                    <CInput\n                      type=\"text\"\n                      placeholder=\"Staff ID\"\n                      autoComplete=\"staffid\"\n                      value={userRegister.staffId}\n                      onChange={(e) =>\n                        setUserRegister({\n                          ...userRegister,\n                          staffId: e.currentTarget.value,\n                        })\n                      }\n                    />\n                  </CInputGroup>\n                  <CInputGroup className=\"mb-3\">\n                    <CInputGroupPrepend>\n                      <CInputGroupText>@</CInputGroupText>\n                    </CInputGroupPrepend>\n                    <CInput\n                      type=\"text\"\n                      placeholder=\"Email\"\n                      autoComplete=\"email\"\n                      value={userRegister.email}\n                      onChange={(e) =>\n                        setUserRegister({\n                          ...userRegister,\n                          email: e.currentTarget.value,\n                        })\n                      }\n                    />\n                  </CInputGroup>\n                  <CInputGroup className=\"mb-3\">\n                    <CInputGroupPrepend>\n                      <CInputGroupText>\n                        <CIcon name=\"cil-lock-locked\" />\n                      </CInputGroupText>\n                    </CInputGroupPrepend>\n                    <CInput\n                      type=\"password\"\n                      placeholder=\"Password\"\n                      autoComplete=\"new-password\"\n                      value={userRegister.password}\n                      onChange={(e) =>\n                        setUserRegister({\n                          ...userRegister,\n                          password: e.currentTarget.value,\n                        })\n                      }\n                    />\n                  </CInputGroup>\n                  <CInputGroup className=\"mb-4\">\n                    <CInputGroupPrepend>\n                      <CInputGroupText>\n                        <CIcon name=\"cil-lock-locked\" />\n                      </CInputGroupText>\n                    </CInputGroupPrepend>\n                    <CInput\n                      type=\"password\"\n                      placeholder=\"Repeat password\"\n                      autoComplete=\"new-password\"\n                      value={userRegister.confirmPassword}\n                      onChange={(e) =>\n                        setUserRegister({\n                          ...userRegister,\n                          confirmPassword: e.currentTarget.value,\n                        })\n                      }\n                    />\n                  </CInputGroup>\n                  <CButton color=\"success\" block onClick={handleSubmit}>\n                    Create Account\n                  </CButton>\n                </CForm>\n              </CCardBody>\n              <CCardFooter className=\"p-4\">\n                <CRow>\n                  {/*<CCol xs=\"12\" sm=\"6\">\n                    <CButton className=\"btn-facebook mb-1\" block><span>facebook</span></CButton>\n                  </CCol>\n                  <CCol xs=\"12\" sm=\"6\">\n                    <CButton className=\"btn-twitter mb-1\" block><span>twitter</span></CButton>\n  </CCol>*/}\n                </CRow>\n              </CCardFooter>\n            </CCard>\n          </CCol>\n        </CRow>\n      </CContainer>\n    </div>\n  )\n}\n\nexport default Register\n"],"sourceRoot":""}