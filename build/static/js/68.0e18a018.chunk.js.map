{"version":3,"sources":["views/pages/customerLoanStatement.jsx"],"names":["CustomerLoanStatement","useState","customers","setCustomers","search","setSearch","useHistory","useEffect","a","axios","get","apiUrl","results","data","getCustomers","Intl","NumberFormat","style","currency","scustomers","filter","item","fullName","toLowerCase","includes","dataTouse","length","className","type","placeholder","onChange","event","target","value","map","c","index","key","id","accountNumber","gender","phone","residentialAddress","color","size","header","onClick","url","reportUrl","window","open"],"mappings":"wUAiLeA,UAzGe,WAAO,IAAD,EACJC,mBAAS,IADL,gCAEAA,mBAAS,KAFT,mBAE3BC,EAF2B,KAEhBC,EAFgB,OAGNF,mBAAS,IAHH,mBAG3BG,EAH2B,KAGnBC,EAHmB,KAInBC,cAEfC,qBAAU,WAAM,4CACd,4BAAAC,EAAA,sEACwBC,IAAMC,IAAIC,SAAS,aAD3C,OACQC,EADR,OAEET,EAAaS,EAAQC,MAFvB,4CADc,uBAAC,WAAD,wBAKdC,KACC,CAACZ,IAMY,IAAIa,KAAKC,aAAa,QAAS,CAC7CC,MAAO,WACPC,SAAU,QANZ,IAaML,EAAO,CACXM,WAAYjB,EAAUkB,QAAO,SAACC,GAAD,OAC3BA,EAAKC,SAASC,cAAcC,SAASpB,EAAOmB,mBAG1CE,EAA8B,IAAlBrB,EAAOsB,OAAexB,EAAYW,EAAKM,WAKzD,OACE,6BACE,yBAAKQ,UAAU,kBACb,yBAAKA,UAAU,oBACb,kBAAC,IAAD,CACEA,UAAU,0BACVC,KAAK,OACLC,YAAY,qCACZC,SAXW,SAACC,GACpB1B,EAAU0B,EAAMC,OAAOC,UAYjB,kBAAC,IAAD,CAAON,UAAU,YACf,+BACE,wBAAIA,UAAU,SACZ,6BACA,8CACA,oCACA,sCAEA,qCACA,4CACA,wCAGJ,+BACGF,EAAUS,KAAI,SAACC,EAAGC,GAAJ,OACb,wBACEC,IAAKF,EAAEG,IAIP,4BAAKF,EAAQ,GACb,4BAAKD,EAAEI,eACP,4BAAKJ,EAAEb,UACP,4BAAKa,EAAEK,QACP,4BAAKL,EAAEM,OACP,4BAAKN,EAAEO,oBACP,4BACE,kBAAC,IAAD,CAAWf,UAAU,OACnB,kBAAC,IAAD,CAAiBgB,MAAM,OAAOC,KAAK,MAAnC,uBAGA,kBAAC,IAAD,CAAeA,KAAK,MAClB,kBAAC,IAAD,CAAeC,QAAM,GAArB,aACA,kBAAC,IAAD,MACA,kBAAC,IAAD,CACEC,QAAS,kBApECC,EAsENC,YAAY,+BAAiCb,EAAEG,QApEzEW,OAAOC,KAAKH,EAAK,eAAgB,QADV,yCADQ,IAACA,IAmEZ,uBASA,kBAAC,IAAD","file":"static/js/68.0e18a018.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from 'react'\nimport { Link, useHistory, useNavigate } from 'react-router-dom'\nimport axios from 'axios'\nimport moment from 'moment'\nimport { apiUrl, reportUrl } from '../../config.json'\nimport auth from '../../components/services/authService'\nimport Joi from 'joi-browser'\nimport Swal from 'sweetalert2'\nimport formData from 'form-data'\n\n//import '../../table.css'\n\n//import Pagination from '../pagination'\n//import { paginate } from '../paginate'\n\n//import { ComponentToPrint } from \"./ComponentToPrint\";\nimport {\n  CBadge,\n  CCard,\n  CCardBody,\n  //CCardHeader,\n  CCol,\n  CDataTable,\n  CRow,\n  CButton,\n  CModal,\n  CModalFooter,\n  CModalHeader,\n  CModalBody,\n  CCardHeader,\n  CInputGroupAppend,\n  CInputGroupPrepend,\n  CDropdownItem,\n  CForm,\n  //CCardFooter,\n  CDropdownToggle,\n  //CInputRadio,\n  CDropdown,\n  CModalTitle,\n  //CFormText,\n  //CTextarea,\n  CFormGroup,\n  CLabel,\n  // CSwitch,\n  CInput,\n  //CInputFile,\n  CSelect,\n  CDropdownMenu,\n  //CCardFooter,\n  CInputGroup,\n  ButtonDropdowns,\n  //CForm,\n  CDropdownDivider,\n  CInputCheckbox,\n  CLink,\n} from '@coreui/react'\n\nimport {\n  Row,\n  Col,\n  Table,\n  Progress,\n  Button,\n  UncontrolledButtonDropdown,\n  DropdownMenu,\n  DropdownToggle,\n  DropdownItem,\n  Input,\n  Label,\n  Badge,\n} from 'reactstrap'\n\nconst CustomerLoanStatement = () => {\n  const [arrears, setArrears] = useState([])\n  const [customers, setCustomers] = useState([])\n  const [search, setSearch] = useState('')\n  let navigate = useHistory()\n\n  useEffect(() => {\n    async function getCustomers() {\n      const results = await axios.get(apiUrl + '/customer')\n      setCustomers(results.data)\n    }\n    getCustomers()\n  }, [customers])\n\n  const openCustomerListAsReport = (url) => {\n    const windowFeatures = 'left=100,top=100,width=320,height=320'\n    window.open(url, 'customerlist', 'popup', windowFeatures)\n  }\n  let formatter = new Intl.NumberFormat('en-US', {\n    style: 'currency',\n    currency: 'GHS',\n\n    // These options are needed to round to whole numbers if that's what you want.\n    //minimumFractionDigits: 0, // (this suffices for whole numbers, but will print 2500.10 as $2,500.1)\n    //maximumFractionDigits: 0, // (causes 2500.99 to be printed as $2,501)\n  })\n\n  const data = {\n    scustomers: customers.filter((item) =>\n      item.fullName.toLowerCase().includes(search.toLowerCase()),\n    ),\n  }\n  const dataTouse = search.length === 0 ? customers : data.scustomers\n\n  const handleSearch = (event) => {\n    setSearch(event.target.value)\n  }\n  return (\n    <div>\n      <div className=\"col-sm-12 mt-3\">\n        <div className=\"table-responsive\">\n          <Input\n            className=\"mt-3 mb-3 ms-3 col-sm-4\"\n            type=\"text\"\n            placeholder=\"Search with Customer Name or Phone\"\n            onChange={handleSearch}\n          />\n          <Table className=\"table-sm\">\n            <thead>\n              <tr className=\"fs-sm\">\n                <th></th>\n                <th>Account Number</th>\n                <th>Name</th>\n                <th>Gender</th>\n\n                <th>Phone</th>\n                <th>Res. Address</th>\n                <th>Action</th>\n              </tr>\n            </thead>\n            <tbody>\n              {dataTouse.map((c, index) => (\n                <tr\n                  key={c.id}\n                  // onClick={() => customerView(c)}\n                  // Style=\"cursor: pointer;\"\n                >\n                  <td>{index + 1}</td>\n                  <td>{c.accountNumber}</td>\n                  <td>{c.fullName}</td>\n                  <td>{c.gender}</td>\n                  <td>{c.phone}</td>\n                  <td>{c.residentialAddress}</td>\n                  <td>\n                    <CDropdown className=\"m-1\">\n                      <CDropdownToggle color=\"info\" size=\"sm\">\n                        View Loan Statement\n                      </CDropdownToggle>\n                      <CDropdownMenu size=\"sm\">\n                        <CDropdownItem header>Statement</CDropdownItem>\n                        <CDropdownDivider />\n                        <CDropdownItem\n                          onClick={() =>\n                            openCustomerListAsReport(\n                              reportUrl + '/customerLoanStatement.aspx?' + c.id,\n                            )\n                          }\n                        >\n                          View Loan Statement\n                        </CDropdownItem>\n                        <CDropdownDivider />\n                      </CDropdownMenu>\n                    </CDropdown>\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </Table>\n        </div>\n      </div>\n    </div>\n  )\n}\n\n//  <td>{moment(s.startDate).format(\"DD,MMMM,YYYY\")}</td>\nexport default CustomerLoanStatement\n"],"sourceRoot":""}