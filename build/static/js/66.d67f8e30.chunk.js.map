{"version":3,"sources":["views/pages/collectionSheet.jsx"],"names":["CollectionSheet","useState","collectionSheet","setCollectionSheet","officer","setOfficer","staff","setStaff","Date","toISOString","slice","collectionDate","setCollectionDate","formatter","auth","getCurrentUser","Intl","NumberFormat","style","currency","useEffect","a","axios","get","apiUrl","results","data","getStaff","getCollectionSheet","today","toLocaleString","month","getDate","getFullYear","reduce","i","DailyAmt","className","lg","class","aria-label","value","onChange","c","currentTarget","defaultValue","map","b","key","id","nameOfStaff","type","e","index","accountNumber","Name","loanId","phone","format","color","onClick","url","reportUrl","window","open"],"mappings":"yUAgPeA,UA/KS,WAAO,IAAD,EACJC,oBAAS,GADL,gCAEAA,oBAAS,IAFT,gCAGkBA,mBAAS,KAH3B,mBAGrBC,EAHqB,KAGJC,EAHI,OAIEF,mBAAS,GAJX,mBAIrBG,EAJqB,KAIZC,EAJY,OAKFJ,mBAAS,IALP,mBAKrBK,EALqB,KAKdC,EALc,OAMgBN,oBAC1C,IAAIO,MAAOC,cAAcC,MAAM,EAAG,KAPR,mBAMrBC,EANqB,KAMLC,EANK,KAWxBC,GAFSC,IAAKC,iBAEF,IAAIC,KAAKC,aAAa,QAAS,CAC7CC,MAAO,WACPC,SAAU,SAOZC,qBAAU,WAAM,4CACd,4BAAAC,EAAA,sEACwBC,IAAMC,IAAIC,SAAS,gBAD3C,OACQC,EADR,OAEElB,EAASkB,EAAQC,MAFnB,4CADc,uBAAC,WAAD,wBAMdC,KACC,IAEHP,qBAAU,WAAM,4CACd,4BAAAC,EAAA,sEACwBC,IAAMC,IAC1BC,SACE,0CACApB,EACA,IACAO,GANN,OACQc,EADR,OAQEtB,EAAmBsB,EAAQC,MAR7B,4CADc,uBAAC,WAAD,wBAWdE,KAEC,CAACxB,EAASO,IAEC,IAAIK,KAAKC,aAAa,QAAS,CAC3CC,MAAO,WACPC,SAAU,QAFZ,IAKIU,EAAQ,IAAIrB,KAGFqB,EAAMC,eAAe,UAAW,CAAEC,MAAO,SAG3CF,EAAMG,UAGLH,EAAMI,cAUF/B,EAAgBgC,QAAO,SAACb,EAAGc,GAC1C,OAAOd,EAAIc,EAAEC,WACZ,GAaH,OACE,yBAAKC,UAAU,mBACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,QACb,kBAAC,KAAD,KACE,kBAAC,IAAD,CAAMC,GAAI,IACR,kBAAC,IAAD,CAAOA,GAAI,IACT,kBAAC,IAAD,CAAaD,UAAU,cACrB,yBAAKA,UAAU,8BACb,wBAAIA,UAAU,mBAAd,+BAKJ,kBAAC,IAAD,KACE,yBAAKE,MAAM,YACT,kBAAC,KAAD,CACEF,UAAU,YACVG,aAAW,yBACXC,MAAOrC,EACPsC,SA1BQ,SAACC,GAC3BtC,EAAWsC,EAAEC,cAAcH,SA2BT,4BAAQI,aAAa,IAArB,wBACCvC,EAAMwC,KAAI,SAACC,GAAD,OACT,4BAAQC,IAAKD,EAAEE,GAAIR,MAAOM,EAAEE,GAAIA,GAAIF,EAAEE,IACnCF,EAAEG,kBAMX,2BAAOb,UAAU,2BAAjB,mBAGA,kBAAC,IAAD,CACEY,GAAG,iBACHE,KAAK,OACLd,UAAU,sCACVG,aAAW,yBACXC,MAAO9B,EACP+B,SAAU,SAACU,GAAD,OAAOxC,EAAkBwC,EAAER,cAAcH,UAGrD,kBAAC,IAAD,CAAOJ,UAAU,sBACf,+BACE,wBAAIA,UAAU,IACZ,6BACA,8CACA,oCACA,uCACA,qCACA,wCAGJ,+BACGnC,EAAgB4C,KAAI,SAACH,EAAGU,GAAJ,OACnB,wBAAIL,IAAKL,EAAEM,IACT,4BAAKI,EAAQ,GACb,4BAAKV,EAAEW,eACP,4BAAKX,EAAEY,MACP,4BAAKZ,EAAEa,QACP,4BAAKb,EAAEc,OACP,4BAAK5C,EAAU6C,OAAOf,EAAEP,mBAOpC,kBAAC,IAAD,CACEC,UAAU,2BACVsB,MAAM,UACNC,QAAS,kBAnFWC,EAqFhBC,YACE,yBACA1D,EACA,IACAO,OAvFlBoD,OAAOC,KAAKH,EAAK,mBAAoB,QADd,yCADQ,IAACA,IAgFtB","file":"static/js/66.d67f8e30.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { Modal } from 'react-bootstrap'\nimport { Link, useNavigate, Navigate } from 'react-router-dom'\nimport axios from 'axios'\nimport moment from 'moment'\nimport Joi from 'joi-browser'\nimport CurrencyFormat from 'react-currency-format'\nimport Swal from 'sweetalert2'\nimport auth from '../../components/services/authService'\nimport { apiUrl } from '../../config.json'\nimport { reportUrl } from '../../config.json'\nimport AdaboSelect from 'react-select'\nimport '../../../src/schedulecards.css'\nimport {\n  Row,\n  Col,\n  Table,\n  Progress,\n  Button,\n  UncontrolledButtonDropdown,\n  DropdownMenu,\n  DropdownToggle,\n  DropdownItem,\n  Input,\n  Label,\n  Badge,\n} from 'reactstrap'\nimport {\n  CBadge,\n  CCard,\n  CCardBody,\n  //CCardHeader,\n  CCol,\n  CDataTable,\n  CRow,\n  CButton,\n  CModal,\n  CModalFooter,\n  CModalHeader,\n  CModalBody,\n  CCardHeader,\n  CInputGroupAppend,\n  CInputGroupPrepend,\n  CDropdownItem,\n  CForm,\n  //CCardFooter,\n  CDropdownToggle,\n  //CInputRadio,\n  CDropdown,\n  CDropdownDivider,\n  CModalTitle,\n  //CFormText,\n  //CTextarea,\n  CFormGroup,\n  CLabel,\n  // CSwitch,\n  CInput,\n  //CInputFile,\n  CSelect,\n  CDropdownMenu,\n  //CCardFooter,\n  CInputGroup,\n  //CForm,\n} from '@coreui/react'\n\nconst CollectionSheet = () => {\n  const [show, setShow] = useState(false)\n  const [render, setRender] = useState(false)\n  const [collectionSheet, setCollectionSheet] = useState([])\n  const [officer, setOfficer] = useState(0)\n  const [staff, setStaff] = useState([])\n  const [collectionDate, setCollectionDate] = useState(\n    new Date().toISOString().slice(0, 10),\n  )\n  const user = auth.getCurrentUser()\n\n  let formatter = new Intl.NumberFormat('en-US', {\n    style: 'currency',\n    currency: 'GHS',\n\n    // These options are needed to round to whole numbers if that's what you want.\n    //minimumFractionDigits: 0, // (this suffices for whole numbers, but will print 2500.10 as $2,500.1)\n    //maximumFractionDigits: 0, // (causes 2500.99 to be printed as $2,501)\n  })\n\n  useEffect(() => {\n    async function getStaff() {\n      const results = await axios.get(apiUrl + '/setup/staff')\n      setStaff(results.data)\n    }\n\n    getStaff()\n  }, [])\n\n  useEffect(() => {\n    async function getCollectionSheet() {\n      const results = await axios.get(\n        apiUrl +\n          '/loan/dailycollections/collectionsheet/' +\n          officer +\n          '/' +\n          collectionDate,\n      )\n      setCollectionSheet(results.data)\n    }\n    getCollectionSheet()\n    //console.log(collectionSheet)\n  }, [officer, collectionDate])\n\n  const money = new Intl.NumberFormat('de-CH', {\n    style: 'currency',\n    currency: 'CHF',\n  })\n\n  var today = new Date()\n\n  // returns the month (from 0 to 11)\n  const month = today.toLocaleString('default', { month: 'long' })\n\n  // returns the day of the month (from 1 to 31)\n  const day = today.getDate()\n\n  // returns the year (four digits)\n  const year = today.getFullYear()\n\n  function add(accumulator, a) {\n    return accumulator + a\n  }\n\n  const handleDateChange = (e) => {\n    setCollectionDate(e.currentTarget.value)\n  }\n\n  const totalAmt = collectionSheet.reduce((a, i) => {\n    return a + i.DailyAmt\n  }, 0)\n\n  const openCustomerListAsReport = (url) => {\n    const windowFeatures = 'left=100,top=100,width=320,height=320'\n    window.open(url, 'Collection Sheet', 'popup', windowFeatures)\n  }\n\n  const handleOfficerSelect = (c) => {\n    setOfficer(c.currentTarget.value)\n    //setOfficer(c.nameOfStaff);\n    // setShow(!show);\n  }\n\n  return (\n    <div className=\"container-fluid\">\n      <div className=\"m-3\">\n        <div className=\"mb-3\">\n          <CRow>\n            <CCol lg={12}>\n              <CCard lg={12}>\n                <CCardHeader className=\"text-right\">\n                  <div className=\"row justify-content-center\">\n                    <h4 className=\"centertext mb-2\">\n                      DAILY COLLECTION SHEET --\n                    </h4>\n                  </div>\n                </CCardHeader>\n                <CCardBody>\n                  <div class=\"mb-3 row\">\n                    <CSelect\n                      className=\"col-sm-12\"\n                      aria-label=\"Default select example\"\n                      value={officer}\n                      onChange={handleOfficerSelect}\n                    >\n                      <option defaultValue=\"\">--Select Officer *--</option>\n                      {staff.map((b) => (\n                        <option key={b.id} value={b.id} id={b.id}>\n                          {b.nameOfStaff}\n                        </option>\n                      ))}\n                    </CSelect>\n                  </div>\n\n                  <label className=\"col-sm-3 col-form-label\">\n                    Collection Date\n                  </label>\n                  <CInput\n                    id=\"collectionDate\"\n                    type=\"date\"\n                    className=\" form-control text-center col-sm-12\"\n                    aria-label=\"Default select example\"\n                    value={collectionDate}\n                    onChange={(e) => setCollectionDate(e.currentTarget.value)}\n                  />\n\n                  <Table className=\"table-lg col-sm-12\">\n                    <thead>\n                      <tr className=\"\">\n                        <th></th>\n                        <th>Account Number</th>\n                        <th>Name</th>\n                        <th>Loan ID</th>\n                        <th>Phone</th>\n                        <th>Amount</th>\n                      </tr>\n                    </thead>\n                    <tbody>\n                      {collectionSheet.map((c, index) => (\n                        <tr key={c.id}>\n                          <td>{index + 1}</td>\n                          <td>{c.accountNumber}</td>\n                          <td>{c.Name}</td>\n                          <td>{c.loanId}</td>\n                          <td>{c.phone}</td>\n                          <td>{formatter.format(c.DailyAmt)}</td>\n                        </tr>\n                      ))}\n                    </tbody>\n                  </Table>\n                </CCardBody>\n              </CCard>\n              <CButton\n                className=\"float-right m-3 col-sm-2\"\n                color=\"success\"\n                onClick={() =>\n                  openCustomerListAsReport(\n                    reportUrl +\n                      '/collectionSheet.aspx?' +\n                      officer +\n                      '?' +\n                      collectionDate,\n                  )\n                }\n              >\n                Generate Sheet\n              </CButton>\n            </CCol>\n          </CRow>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default CollectionSheet\n"],"sourceRoot":""}