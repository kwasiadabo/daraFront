{"version":3,"sources":["views/pages/viewLoanBookings.jsx"],"names":["ViewLoanBooking","useState","loanBookings","setLoanBookings","show","setShow","Date","search","setSearch","toISOString","slice","startDate","setStartDate","endDate","setEndDate","formatDate","date","newDate","getFullYear","toString","getMonth","substring","getDate","useEffect","a","axios","get","apiUrl","results","data","viewLoanBookings","filter","l","dateCompleted","loans","fullName","toLowerCase","includes","openCustomerListAsReport","url","window","open","dataTouse","length","formatter","Intl","NumberFormat","style","currency","className","lg","type","onChange","e","currentTarget","value","color","onClick","reportUrl","placeholder","event","target","map","c","index","key","id","product","format","principal","interestRate","nameOfStaff","size","disbursementId","customer","data-backdrop","data-keyboard","onClose","closeButton","disbursedAmount"],"mappings":"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","file":"static/js/89.94228a60.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { Modal } from 'react-bootstrap'\nimport { Link, useNavigate, Navigate, useHistory } from 'react-router-dom'\nimport axios from 'axios'\nimport moment from 'moment'\nimport Joi from 'joi-browser'\nimport CurrencyFormat from 'react-currency-format'\nimport Swal from 'sweetalert2'\nimport auth from '../../components/services/authService'\nimport { apiUrl } from '../../config.json'\nimport { reportUrl } from '../../config.json'\nimport BookProduct from './bookProduct'\nimport LoanPrincipal from './loanPrincipalEntry'\nimport Guarantors from './guarantors'\nimport GuarantorTwo from './guarantorTwo'\nimport BusinessDetails from './businessDetails'\nimport Directions from './directions'\nimport AdaboSelect from 'react-select'\nimport {\n  Row,\n  Col,\n  Table,\n  Progress,\n  Button,\n  UncontrolledButtonDropdown,\n  DropdownMenu,\n  DropdownToggle,\n  DropdownItem,\n  Input,\n  Label,\n  Badge,\n} from 'reactstrap'\nimport {\n  CBadge,\n  CCard,\n  CCardBody,\n  //CCardHeader,\n  CCol,\n  CDataTable,\n  CRow,\n  CButton,\n  CModal,\n  CModalFooter,\n  CModalHeader,\n  CModalBody,\n  CCardHeader,\n  CInputGroupAppend,\n  CInputGroupPrepend,\n  CDropdownItem,\n  CForm,\n  //CCardFooter,\n  CDropdownToggle,\n  //CInputRadio,\n  CDropdown,\n  CDropdownDivider,\n  CModalTitle,\n  //CFormText,\n  //CTextarea,\n  CFormGroup,\n  CLabel,\n  // CSwitch,\n  CInput,\n  //CInputFile,\n  CSelect,\n  CDropdownMenu,\n  //CCardFooter,\n  CInputGroup,\n  //CForm,\n} from '@coreui/react'\nimport { now } from 'moment'\n\nconst ViewLoanBooking = () => {\n  const [loanBookings, setLoanBookings] = useState([])\n  const [details, setDetails] = useState([])\n  const [render, setRender] = useState(false)\n  const [show, setShow] = useState(false)\n  const [dated, setDated] = useState(new Date())\n  const [search, setSearch] = useState('')\n  const [startDate, setStartDate] = useState(\n    new Date().toISOString().slice(0, 10),\n  )\n  const [endDate, setEndDate] = useState(new Date().toISOString().slice(0, 10))\n\n  function formatDate(date) {\n    let newDate = new Date(date)\n    var year = newDate.getFullYear().toString()\n    var month = (newDate.getMonth() + 101).toString().substring(1)\n    var day = (newDate.getDate() + 100).toString().substring(1)\n    return year + '-' + month + '-' + day\n  }\n\n  useEffect(() => {\n    async function viewLoanBookings() {\n      const results = await axios.get(\n        apiUrl + '/loan/booking/report/' + startDate + '/' + endDate,\n      )\n      //console.log(results.data)\n      setLoanBookings(results.data)\n      //if (results.data[0].img == null) return\n      //setBuffer(results.data[0].img.data)\n    }\n    viewLoanBookings()\n    // console.log(loanBookings)\n  }, [startDate, endDate])\n\n  /*useEffect(() => {\n    async function getRegistrationFees() {\n      const results = await axios.get(apiUrl + '/loan/registrationfee')\n      setRegistrationFees(results.data)\n    }\n    getRegistrationFees()\n  }, [registrationFees, render])\n*/\n  const getBookedLoanDetails = async (c) => {\n    const results = await axios.get(apiUrl + '/loan/booking/details/' + c)\n    console.log(results.data)\n    setDetails(results.data)\n    setShow(!show)\n  }\n  const handleStartDateChange = (e) => {\n    setStartDate(e.currentTarget.value)\n  }\n  const handleEndDateChange = (e) => {\n    setEndDate(e.currentTarget.value)\n  }\n\n  const handleDateSelected = async (e) => {\n    setDated(e.currentTarget.value)\n  }\n  const getTodaysBookings = {\n    loans: loanBookings.filter(\n      (l) => formatDate(l.dateCompleted) === formatDate(new Date()),\n    ),\n  }\n\n  const data = {\n    loans: loanBookings.filter((l) =>\n      l.fullName.toLowerCase().includes(search.toLowerCase()),\n    ),\n  }\n\n  const openCustomerListAsReport = (url) => {\n    const windowFeatures = 'left=100,top=100,width=320,height=320'\n    window.open(url, 'Loan Details', 'popup', windowFeatures)\n  }\n\n  // const dataTouse = dated === new Date() ? getTodaysBookings.loans : data.loans\n  const dataTouse = search.length === 0 ? loanBookings : data.loans\n\n  const handleSearch = (event) => {\n    setSearch(event.target.value)\n  }\n  let formatter = new Intl.NumberFormat('en-US', {\n    style: 'currency',\n    currency: 'GHS',\n\n    // These options are needed to round to whole numbers if that's what you want.\n    //minimumFractionDigits: 0, // (this suffices for whole numbers, but will print 2500.10 as $2,500.1)\n    //maximumFractionDigits: 0, // (causes 2500.99 to be printed as $2,501)\n  })\n  return (\n    <div>\n      <div className=\"row justify-content-center mb-3\">\n        <p className=\"mb-2\">\n          Loans in the list are fully booked and various accounting effects\n          completed. Loan beneficiaries are expected to complete the payment of\n          such loans\n        </p>\n      </div>\n      <CRow>\n        <CCol lg={12}>\n          <CCard>\n            <CCardHeader className=\"text-right\">\n              <div className=\"m-2\">\n                <label className=\"m-2\">Start Date</label>\n                <CInput\n                  type=\"date\"\n                  className=\"col-sm-3 float-right\"\n                  onChange={handleStartDateChange}\n                />\n              </div>\n              <div className=\"m-2\">\n                <label className=\"m-2\">End Date</label>\n                <CInput\n                  type=\"date\"\n                  className=\"col-sm-3 float-right ms-3\"\n                  onChange={handleEndDateChange}\n                />\n              </div>\n              <CButton\n                className=\"float-right m-3 col-sm-3 btn-sm\"\n                color=\"warning\"\n                onClick={() =>\n                  openCustomerListAsReport(\n                    reportUrl +\n                      '/bookedLoans.aspx?' +\n                      startDate +\n                      '?' +\n                      endDate,\n                  )\n                }\n              >\n                View As Report\n              </CButton>\n            </CCardHeader>\n            <h4 className=\"text-center mt-3\">Booked Loans</h4>\n            <CCardBody>\n              <Input\n                className=\"mt-3 mb-3 ms-3 col-sm-4\"\n                type=\"text\"\n                placeholder=\"Search with Customer Name\"\n                onChange={handleSearch}\n              />\n              <Table className=\"table-sm\">\n                <caption>Booked Loans</caption>\n\n                <thead>\n                  <tr className=\"fs-sm\">\n                    <th></th>\n                    <th>Customer</th>\n                    <th>Product</th>\n                    <th>Prinicipal</th>\n                    <th>Rate (%)</th>\n                    <th>Loan Amount</th>\n                    <th>Loan Officer</th>\n                    <th></th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {dataTouse.map((c, index) => (\n                    <tr key={c.id}>\n                      <td>{index + 1}</td>\n\n                      <td>{c.fullName}</td>\n                      <td>{c.product}</td>\n                      <td>{formatter.format(c.principal)}</td>\n                      <td>{c.interestRate}</td>\n                      <td>\n                        {formatter.format(\n                          c.principal + (c.interestRate / 100) * c.principal,\n                        )}\n                      </td>\n\n                      <td>{c.nameOfStaff}</td>\n                      {/* <td>\n                        <CButton\n                          className=\"btn-sm\"\n                          color=\"success\"\n                          onClick={() =>\n                            openCustomerListAsReport(\n                              reportUrl + '/individualLoanDetails.aspx?' + c.id,\n                            )\n                          }\n                        >\n                          View\n                        </CButton>\n                      </td> */}\n                      <td>\n                        <CDropdown className=\"m-1\">\n                          <CDropdownToggle color=\"info\" size=\"sm\">\n                            View\n                          </CDropdownToggle>\n                          <CDropdownMenu size=\"sm\">\n                            <CDropdownItem\n                              onClick={() =>\n                                openCustomerListAsReport(\n                                  reportUrl +\n                                    '/individualLoanDetails.aspx?' +\n                                    c.id,\n                                )\n                              }\n                            >\n                              Loan Report\n                            </CDropdownItem>\n\n                            <CDropdownDivider />\n                            <CDropdownItem\n                              onClick={() =>\n                                openCustomerListAsReport(\n                                  reportUrl +\n                                    '/paymentSchedule.aspx?' +\n                                    c.disbursementId +\n                                    '?' +\n                                    c.customer,\n                                )\n                              }\n                            >\n                              Payment Schedule\n                            </CDropdownItem>\n\n                            {/* <CDropdownDivider />\n                            <CDropdownItem>Re-assign To Officer</CDropdownItem> */}\n                          </CDropdownMenu>\n                        </CDropdown>\n                      </td>\n                    </tr>\n                  ))}\n                </tbody>\n              </Table>\n            </CCardBody>\n          </CCard>\n        </CCol>\n      </CRow>\n      <CModal\n        className=\"modal fade col-sm-12\"\n        size=\"lg\"\n        show={show}\n        color=\"info\"\n        data-backdrop=\"static\"\n        data-keyboard=\"false\"\n        onClose={() => {\n          setShow(!show)\n        }}\n      >\n        <CModalHeader className=\"modal-header\" closeButton>\n          <div className=\"row\">\n            <div className=\"col-sm-4 text-left\">\n              <h6 className=\"\">Applicant: {null}</h6>\n            </div>\n            <div className=\"col-sm-4 text-left\">\n              <h6 className=\"\">Bank: {null}</h6>\n            </div>\n            <div className=\"col-sm-4 text-left\">\n              <h6 className=\"\">Amount Disbursed: {null}</h6>\n            </div>\n            <div className=\"col-sm-4 text-left\">\n              <h6 className=\"\">\n                Date Disbursed :\n                {/* {moment(selectedLoan.disburseDate).format('DD,MMMM,YYYY')} */}\n              </h6>\n            </div>\n            <div className=\"col-sm-4 text-left\">\n              <h6 className=\"\">Disbursed By: {null}</h6>\n            </div>\n          </div>\n        </CModalHeader>\n\n        <CModalBody className=\"modal-body col-sm-12\">\n          <h4 className=\"text-center mb-3\">Loan Principal And Purpose</h4>\n          <LoanPrincipal\n            customer={null}\n            disbursementId={null}\n            disbursedAmount={null}\n          />\n        </CModalBody>\n\n        <CModalFooter></CModalFooter>\n      </CModal>\n    </div>\n  )\n}\n\nexport default ViewLoanBooking\n"],"sourceRoot":""}