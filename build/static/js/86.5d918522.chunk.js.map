{"version":3,"sources":["views/pages/userAccount.js"],"names":["UserAccount","props","useState","allStaff","setAllStaff","branch","setBranch","username","password","staff","userRole","userAccount","setUserAccount","useEffect","a","axios","get","apiUrl","data","getStaff","getBranch","chars","i","randomNumber","Math","floor","random","length","substring","genPassword","handleSubmit","e","preventDefault","console","log","post","status","Swal","fire","handleBackup","db","className","htmlFor","aria-label","value","onChange","currentTarget","defaultValue","map","s","key","id","nameOfStaff","type","b","color","onClick"],"mappings":"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","file":"static/js/86.5d918522.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport axios from 'axios'\nimport moment from 'moment'\nimport Swal from 'sweetalert2'\nimport { apiUrl } from '../../config.json'\n\nimport {\n  CBadge,\n  CCard,\n  CCardBody,\n  //CCardHeader,\n  CCol,\n  CDataTable,\n  CRow,\n  CButton,\n  CModal,\n  CModalFooter,\n  CModalHeader,\n  CModalBody,\n  CCardHeader,\n  CInputGroupAppend,\n  CInputGroupPrepend,\n  CDropdownItem,\n  CForm,\n  //CCardFooter,\n  CDropdownToggle,\n  //CInputRadio,\n  CDropdown,\n  CModalTitle,\n  //CFormText,\n  //CTextarea,\n  CFormGroup,\n  CLabel,\n  // CSwitch,\n  CInput,\n  //CInputFile,\n  CSelect,\n  CDropdownMenu,\n  //CCardFooter,\n  CInputGroup,\n  //CForm,\n} from '@coreui/react'\n\nfunction UserAccount(props) {\n  const [allStaff, setAllStaff] = useState([])\n  const [branch, setBranch] = useState([])\n  const [userAccount, setUserAccount] = useState({\n    username: '',\n    password: 'pass1234',\n    staff: 0,\n    branch: 0,\n    userRole: '',\n  })\n\n  useEffect(() => {\n    async function getStaff() {\n      const staff = await axios.get(apiUrl + '/setup/staff')\n      setAllStaff(staff.data)\n    }\n    getStaff()\n  }, [])\n\n  useEffect(() => {\n    async function getBranch() {\n      const branch = await axios.get(apiUrl + '/setup/branch')\n      setBranch(branch.data)\n    }\n    getBranch()\n\n    genPassword()\n  }, [])\n\n  const handleSubmit = async (e) => {\n    e.preventDefault()\n    console.log(userAccount)\n    try {\n      const results = await axios.post(apiUrl + '/setup/user', userAccount)\n      if (results.status !== 200) {\n        return Swal.fire(\n          'Failed',\n          'Submission Failed ! Check Entries and try again !',\n          'error',\n        )\n      } else {\n        Swal.fire('Success', 'User Account Created Successfully', 'success')\n        Swal.fire(\n          'Default Password',\n          'Default Password: ' +\n            userAccount.password +\n            ' : Change this on your first login.',\n          'info',\n        )\n        setUserAccount({\n          username: '',\n          password: 'pass1234',\n          userRole: '',\n          branch: 0,\n          staff: 0,\n        })\n      }\n    } catch (err) {\n      Swal.fire('OOPS ! ' + err, 'error')\n    }\n  }\n\n  function genPassword() {\n    let chars = '123456789abcdefghijklmnpqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ'\n    let passwordLength = 8\n    let tempPassword = ''\n    for (let i = 0; i <= passwordLength; i++) {\n      let randomNumber = Math.floor(Math.random() * chars.length)\n      tempPassword += chars.substring(randomNumber, randomNumber + 1)\n    }\n    setUserAccount({\n      ...userAccount,\n      password: 'pass1234',\n      // confirmPassword: tempPassword,\n    })\n  }\n  const handleBackup = async () => {\n    const results = await axios.post(apiUrl + '/backup', {\n      db: 'Daraplus',\n    })\n    if (results.status !== 200) {\n      return Swal.fire('Backup Failed', 'Db Back Failed ! try again !', 'error')\n    } else {\n      Swal.fire('Success', 'Backup Completed Successfully', 'success')\n    }\n  }\n\n  return (\n    <div className=\"container\">\n      <h1 className=\"centertext\">Setup User Accounts</h1>\n      <p className=\"staffp mb-3\">\n        A user account is an established technique for connecting a user and an\n        information service and/or computer network. User accounts determine\n        whether or not a user can connect to a computer, network or similar\n        networks.\n      </p>\n      <div className=\"mb-3 row\">\n        <label htmlFor=\"phoneworship\" className=\"form-label col-sm-2\">\n          FullName\n        </label>\n        <CSelect\n          className=\"col-sm-6\"\n          aria-label=\"Default select example\"\n          value={userAccount.staff}\n          onChange={(e) =>\n            setUserAccount({\n              ...userAccount,\n              staff: e.currentTarget.value,\n            })\n          }\n        >\n          <option defaultValue=\"\">--Select Officer--</option>\n          {allStaff.map((s) => (\n            <option key={s.id} value={s.id} id={s.id}>\n              {s.nameOfStaff}\n            </option>\n          ))}\n        </CSelect>\n      </div>\n      <div className=\"mb-3 row\">\n        <label htmlFor=\"username\" className=\"form-label col-sm-2\">\n          Username\n        </label>\n        <CInput\n          type=\"text\"\n          className=\"col-sm-6\"\n          id=\"username\"\n          value={userAccount.username}\n          onChange={(e) =>\n            setUserAccount({\n              ...userAccount,\n              username: e.currentTarget.value,\n            })\n          }\n        />\n      </div>\n      <div className=\"mb-3 row\">\n        <label htmlFor=\"gender\" className=\"form-label col-sm-2\">\n          User Role\n        </label>\n        <CSelect\n          className=\"col-sm-6\"\n          aria-label=\"Default select example\"\n          value={userAccount.userRole}\n          onChange={(e) => {\n            setUserAccount({\n              ...userAccount,\n              userRole: e.currentTarget.value,\n            })\n          }}\n        >\n          <option defaultValue=\"\">--Select User Role--</option>\n          <option value=\"Admin\">Admin</option>\n          <option value=\"Loan Officer\">Loan Officer</option>\n          <option value=\"Supervisor\">Supervisor</option>\n          <option value=\"Recovery Officer\">Recovery Officer</option>\n          <option value=\"Customer Service Officer\">\n            Customer Service Officer\n          </option>\n          <option value=\"Management\">Management</option>\n        </CSelect>\n      </div>\n      <div className=\"mb-3 row\">\n        <label htmlFor=\"branch\" className=\"form-label col-sm-2\">\n          Branch\n        </label>\n        <CSelect\n          className=\"col-sm-6\"\n          aria-label=\"Default select example\"\n          value={userAccount.branch}\n          onChange={(e) => {\n            setUserAccount({\n              ...userAccount,\n              branch: e.currentTarget.value,\n            })\n          }}\n        >\n          <option defaultValue=\"\">--Select Branch--</option>\n          {branch.map((b) => (\n            <option key={b.id} value={b.id} id={b.id}>\n              {b.branch}\n            </option>\n          ))}\n        </CSelect>\n      </div>\n\n      <CButton\n        className=\"col-sm-3 mt-3 btn-sm float-right mt-3\"\n        color=\"success\"\n        onClick={handleSubmit}\n      >\n        Submit\n      </CButton>\n\n      <CButton color=\"danger\" className=\"btn-sm\" onClick={handleBackup}>\n        DB Backup\n      </CButton>\n    </div>\n  )\n}\n\nexport default UserAccount\n"],"sourceRoot":""}