{"version":3,"sources":["views/pages/bankAccount.js"],"names":["BankAccount","useState","bank","branch","accountNumber","accountName","typeOfAccount","setBank","banks","setBanks","bankAccounts","setBankAccounts","useEffect","a","axios","get","baseUrl","apiUrl","results","data","getBanks","getBankAccounts","handleSubmit","e","preventDefault","post","console","log","status","Swal","fire","contact","message","className","for","aria-label","value","onChange","currentTarget","defaultValue","map","b","key","id","htmlFor","type","onClick","c","index","_id","Style","BankName"],"mappings":"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","file":"static/js/63.b68323ed.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { Link, useNavigate, Navigate } from 'react-router-dom'\nimport axios from 'axios'\nimport moment from 'moment'\nimport baseUrl from '../../config.json'\nimport auth from '../../components/services/authService'\nimport Swal from 'sweetalert2'\nimport {\n  Row,\n  Col,\n  Table,\n  Progress,\n  Button,\n  UncontrolledButtonDropdown,\n  DropdownMenu,\n  DropdownToggle,\n  DropdownItem,\n  Input,\n  Label,\n  Badge,\n} from 'reactstrap'\nimport {\n  CBadge,\n  CCard,\n  CCardBody,\n  //CCardHeader,\n  CCol,\n  CDataTable,\n  CRow,\n  CButton,\n  CModal,\n  CModalFooter,\n  CModalHeader,\n  CModalBody,\n  CCardHeader,\n  CInputGroupAppend,\n  CInputGroupPrepend,\n  CDropdownItem,\n  CForm,\n  //CCardFooter,\n  CDropdownToggle,\n  //CInputRadio,\n  CDropdown,\n  CModalTitle,\n  //CFormText,\n  //CTextarea,\n  CFormGroup,\n  CLabel,\n  // CSwitch,\n  CInput,\n  //CInputFile,\n  CSelect,\n  CDropdownMenu,\n  //CCardFooter,\n  CInputGroup,\n  //CForm,\n} from '@coreui/react'\n\nconst BankAccount = () => {\n  const [bank, setBank] = useState({\n    bank: '',\n    branch: '',\n    accountNumber: '',\n    accountName: '',\n    typeOfAccount: '',\n  })\n  const [banks, setBanks] = useState([])\n  const [bankAccounts, setBankAccounts] = useState([])\n\n  useEffect(() => {\n    async function getBanks() {\n      const results = await axios.get(baseUrl.apiUrl + '/setup/bank')\n      setBanks(results.data)\n    }\n    getBanks()\n  }, [banks])\n\n  useEffect(() => {\n    async function getBankAccounts() {\n      const results = await axios.get(baseUrl.apiUrl + '/setup/bankaccount')\n      setBankAccounts(results.data)\n    }\n    getBankAccounts()\n  }, [bankAccounts])\n\n  const handleSubmit = async (e) => {\n    e.preventDefault()\n    try {\n      const results = await axios.post(\n        baseUrl.apiUrl + '/setup/bankaccount',\n        bank,\n      )\n      console.log(results.status)\n      if (results.status !== 200) {\n        return Swal.fire(\n          'OOPS',\n          'Submission Failed ! Check Entries and try again !',\n          'error',\n        )\n      } else {\n        Swal.fire(\n          'Success',\n          'Bank Account Details Saved Successfully',\n          'success',\n        )\n        setBank({\n          bank: '',\n          branch: '',\n          accountNumber: '',\n          accountName: '',\n          typeOfAccount: '',\n          contact: '',\n        })\n      }\n    } catch (err) {\n      Swal.fire('OOPS ! ' + err.message, 'error')\n    }\n  }\n\n  return (\n    <div className=\"container-fluid\">\n      <h1 className=\"centertext\">Bank Account Details</h1>\n      <p className=\"staffp\">\n        Giving your banks accounts details helps track your transactions with\n        them.\n      </p>\n\n      <CInputGroup className=\"mt-3\">\n        <CLabel for=\"inputPassword\" className=\"col-sm-3\">\n          Bank\n        </CLabel>\n\n        <CSelect\n          className=\"form-select col-sm-8\"\n          aria-label=\"Default select example \"\n          value={bank.bank}\n          onChange={(e) => setBank({ ...bank, bank: e.currentTarget.value })}\n        >\n          <option defaultValue=\"\">--Select Bank--</option>\n          {banks.map((b) => (\n            <option key={b.id} value={b.id} id={b.id}>\n              {b.bank}\n            </option>\n          ))}\n        </CSelect>\n      </CInputGroup>\n\n      <CInputGroup className=\"mt-3\">\n        <CLabel htmlFor=\"appdate\" className=\"col-sm-3\">\n          Branch\n        </CLabel>\n\n        <CInput\n          type=\"text\"\n          className=\"form-control  col-sm-8\"\n          id=\"appdate\"\n          value={bank.branch}\n          onChange={(e) =>\n            setBank({\n              ...bank,\n              branch: e.currentTarget.value,\n            })\n          }\n        />\n      </CInputGroup>\n\n      <CInputGroup className=\"mt-3\">\n        <CLabel htmlFor=\"phoneofgurantor1\" className=\"col-sm-3\">\n          Account Name\n        </CLabel>\n\n        <CInput\n          type=\"text\"\n          className=\"form-control  col-sm-8\"\n          id=\"phoneofgurantor1\"\n          value={bank.accountName}\n          onChange={(e) =>\n            setBank({\n              ...bank,\n              accountName: e.currentTarget.value,\n            })\n          }\n        />\n      </CInputGroup>\n\n      <CInputGroup className=\"mt-3\">\n        <CLabel htmlFor=\"phone\" className=\"col-sm-3\">\n          Account Number\n        </CLabel>\n\n        <CInput\n          type=\"text\"\n          className=\"form-control col-sm-8\"\n          id=\"phone\"\n          value={bank.accountNumber}\n          onChange={(e) =>\n            setBank({\n              ...bank,\n              accountNumber: e.currentTarget.value,\n            })\n          }\n        />\n      </CInputGroup>\n\n      <CInputGroup className=\"mt-3\">\n        <CLabel htmlFor=\"qualification\" className=\"col-sm-3\">\n          Type of Account\n        </CLabel>\n\n        <CSelect\n          className=\"form-select col-sm-8\"\n          aria-label=\"Default select example\"\n          value={bank.typeOfAccount}\n          onChange={(e) => {\n            setBank({\n              ...bank,\n              typeOfAccount: e.currentTarget.value,\n            })\n          }}\n        >\n          <option defaultValue=\"\">--Select Account Type--</option>\n          <option value=\"Savings\">Savings</option>\n          <option value=\"Current Account\">Current</option>\n        </CSelect>\n      </CInputGroup>\n\n      <div className=\"row justify-content-center\">\n        <CButton\n          className=\"btn btn-danger col-sm-3 mt-3\"\n          onClick={handleSubmit}\n        >\n          Submit\n        </CButton>\n      </div>\n\n      <Table className=\"mt-3 sm\">\n        <thead>\n          <tr className=\"fs-sm\">\n            <th></th>\n            <th>Bank</th>\n            <th>Account Number</th>\n            <th>Branch</th>\n            <th>Type Of Account</th>\n            <th>Name of Account</th>\n          </tr>\n        </thead>\n        <tbody>\n          {bankAccounts.map((c, index) => (\n            <tr key={c._id} Style=\"cursor: pointer;\">\n              <td>{index + 1}</td>\n              <td>{c.BankName}</td>\n              <td>{c.accountNumber}</td>\n              <td>{c.branch}</td>\n              <td>{c.typeOfAccount}</td>\n              <td>{c.accountName}</td>\n            </tr>\n          ))}\n        </tbody>\n      </Table>\n    </div>\n  )\n}\n\nexport default BankAccount\n"],"sourceRoot":""}