{"version":3,"sources":["views/pages/viewToCorrectRepayments.js"],"names":["ViewToCorrectRepayment","useState","dailycollections","setDailyCollections","render","setRender","search","setSearch","Date","show","setShow","toISOString","slice","dateOfCollection","setDateOfCollection","id","customer","officer","amount","ModeOfPayment","status","loanId","allData","setAllData","ds","setDs","useEffect","a","axios","get","apiUrl","results","data","getDailyCollections","dailycollectionsFilter","filter","item","Officer","toLowerCase","includes","Customer","dataTouse","length","formatter","Intl","NumberFormat","style","currency","handleCorrection","console","log","post","statusText","Swal","fire","message","lg","className","class","htmlFor","type","value","onChange","e","currentTarget","map","c","index","key","format","Amount","color","onClick","modeOfPayment","size","data-backdrop","data-keyboard","closeButton","align","Body","name","autoComplete","Footer"],"mappings":"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","file":"static/js/91.7180864e.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { Modal } from 'react-bootstrap'\nimport { Link, useNavigate, Navigate, useHistory } from 'react-router-dom'\nimport axios from 'axios'\nimport moment from 'moment'\nimport Joi from 'joi-browser'\nimport CurrencyFormat from 'react-currency-format'\nimport Swal from 'sweetalert2'\nimport auth from '../../components/services/authService'\nimport { apiUrl } from '../../config.json'\nimport { reportUrl } from '../../config.json'\nimport BookProduct from './bookProduct'\nimport LoanPrincipal from './loanPrincipalEntry'\nimport Guarantors from './guarantors'\nimport GuarantorTwo from './guarantorTwo'\nimport BusinessDetails from './businessDetails'\nimport Directions from './directions'\nimport AdaboSelect from 'react-select'\nimport {\n  Row,\n  Col,\n  Table,\n  Progress,\n  Button,\n  UncontrolledButtonDropdown,\n  DropdownMenu,\n  DropdownToggle,\n  DropdownItem,\n  Input,\n  Label,\n  Badge,\n} from 'reactstrap'\nimport {\n  CBadge,\n  CCard,\n  CCardBody,\n  //CCardHeader,\n  CCol,\n  CDataTable,\n  CRow,\n  CButton,\n  CModal,\n  CModalFooter,\n  CModalHeader,\n  CModalBody,\n  CCardHeader,\n  CInputGroupAppend,\n  CInputGroupPrepend,\n  CDropdownItem,\n  CForm,\n  //CCardFooter,\n  CDropdownToggle,\n  //CInputRadio,\n  CDropdown,\n  CDropdownDivider,\n  CModalTitle,\n  //CFormText,\n  //CTextarea,\n  CFormGroup,\n  CLabel,\n  // CSwitch,\n  CInput,\n  //CInputFile,\n  CSelect,\n  CDropdownMenu,\n  //CCardFooter,\n  CInputGroup,\n  //CForm,\n} from '@coreui/react'\nimport { now } from 'moment'\n\nconst ViewToCorrectRepayment = () => {\n  const [dailycollections, setDailyCollections] = useState([])\n  const [render, setRender] = useState(false)\n  const [search, setSearch] = useState('')\n  const [dated, setDated] = useState(new Date())\n  const [show, setShow] = useState(false)\n  const [save, setSave] = useState(true)\n  const [edit, setEdit] = useState(false)\n  const [dateOfCollection, setDateOfCollection] = useState(\n    new Date().toISOString().slice(0, 10),\n  )\n  const [allData, setAllData] = useState({\n    id: '',\n    dateOfCollection: '',\n    customer: '',\n    officer: '',\n    amount: '',\n    ModeOfPayment: '',\n    status: '',\n    loanId: '',\n  })\n\n  const [ds, setDs] = useState({\n    id: 0,\n    amount: 0,\n  })\n\n  function formatDate(date) {\n    let newDate = new Date(date)\n    var year = newDate.getFullYear().toString()\n    var month = (newDate.getMonth() + 101).toString().substring(1)\n    var day = (newDate.getDate() + 100).toString().substring(1)\n    return year + '-' + month + '-' + day\n  }\n\n  useEffect(() => {\n    async function getDailyCollections() {\n      const results = await axios.get(\n        apiUrl + '/loan/dailycollections/correction/' + dateOfCollection,\n      )\n      setDailyCollections(results.data)\n      //if (results.data[0].img == null) return\n      //setBuffer(results.data[0].img.data)\n    }\n    getDailyCollections()\n  }, [render, dateOfCollection])\n\n  const handleDateOfPaymentChange = (e) => {\n    setDateOfCollection(e.currentTarget.value)\n  }\n  const handleSearchChanged = (e) => {\n    setSearch(e.currentTarget.value)\n  }\n\n  /*useEffect(() => {\n    async function getRegistrationFees() {\n      const results = await axios.get(apiUrl + '/loan/registrationfee')\n      setRegistrationFees(results.data)\n    }\n    getRegistrationFees()\n  }, [registrationFees, render])\n*/\n  const data = {\n    dailycollectionsFilter: dailycollections.filter(\n      (item) =>\n        item.Officer.toLowerCase().includes(search.toLowerCase()) ||\n        item.Customer.toLowerCase().includes(search.toLowerCase()),\n    ),\n  }\n\n  const dataTouse =\n    search.length === 0 ? dailycollections : data.dailycollectionsFilter\n\n  let formatter = new Intl.NumberFormat('en-US', {\n    style: 'currency',\n    currency: 'GHS',\n\n    // These options are needed to round to whole numbers if that's what you want.\n    //minimumFractionDigits: 0, // (this suffices for whole numbers, but will print 2500.10 as $2,500.1)\n    //maximumFractionDigits: 0, // (causes 2500.99 to be printed as $2,501)\n  })\n  const openCustomerListAsReport = (url) => {\n    const windowFeatures = 'left=100,top=100,width=320,height=320'\n    window.open(url, 'customerlist', 'popup', windowFeatures)\n  }\n\n  const showModal = (e) => {\n    setAllData({\n      id: e.id,\n      dateOfCollection: e.dateOfCollection,\n      customer: e.Customer,\n      officer: e.Officer,\n      amount: e.Amount,\n      modeOfPayment: e.ModeOfPayment,\n      status: e.status,\n      loanId: e.loanId,\n    })\n    setDs({\n      id: e.id,\n      amount: e.Amount,\n    })\n    setShow(!show)\n  }\n\n  const handleCorrection = async () => {\n    console.log(ds)\n    try {\n      const results = await axios.post(\n        apiUrl + '/loan/dailycollections/payment/correctdailycollection',\n        {\n          id: ds.id,\n          amount: ds.amount,\n        },\n      )\n      if (results.statusText === 'OK') {\n        Swal.fire('Success', 'Correction Made', 'success')\n        setAllData({\n          id: '',\n          dateOfCollection: '',\n          customer: '',\n          officer: '',\n          amount: '',\n          ModeOfPayment: '',\n          status: '',\n          loanId: '',\n        })\n        setDs({\n          id: 0,\n          amount: 0,\n        })\n        setRender(!render)\n      } else {\n        //console.log(results)\n        return Swal.fire('OOPS', 'Correction Unsuccessful', 'error')\n      }\n    } catch (ex) {\n      return Swal.fire(\n        ex.message + '[OOPS',\n        'Correction Unsuccessful]',\n        'error',\n      )\n    }\n  }\n  return (\n    <div>\n      <CRow>\n        <CCol lg={12}>\n          <CCard>\n            <h4 className=\"text-left mt-3\">Daily Collections Update</h4>\n            <CCardBody>\n              <div class=\"mb-3 row mt-5 col-sm-12\">\n                <CLabel htmlFor=\"dateOfPayment\" className=\"form-label\">\n                  Date Of Payment\n                </CLabel>\n                <div className=\"col-sm-3\">\n                  <CInput\n                    type=\"date\"\n                    class=\"form-control\"\n                    id=\"dateOfPayment\"\n                    value={dateOfCollection}\n                    onChange={handleDateOfPaymentChange}\n                  />\n                </div>\n\n                <CLabel htmlFor=\"search\" className=\"form-label\">\n                  Search\n                </CLabel>\n                <div className=\"col-sm-3\">\n                  <CInput\n                    type=\"text\"\n                    class=\"form-control\"\n                    id=\"search\"\n                    value={search}\n                    onChange={handleSearchChanged}\n                  />\n                </div>\n              </div>\n\n              <Table className=\"table-sm\">\n                <caption>Daily Collections</caption>\n                <thead>\n                  <tr className=\"fs-sm\">\n                    <th></th>\n                    <th>ID</th>\n                    {/* <th>Date Of Collection</th> */}\n                    <th>Customer</th>\n                    <th>Officer</th>\n                    <th>Amount</th>\n                    <th>Mode Of Payment</th>\n                    <th>Status</th>\n                    <th>Loan ID</th>\n                    <th></th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {dataTouse.map((c, index) => (\n                    <tr key={c.id}>\n                      <td>{index + 1}</td>\n                      <td>{c.id}</td>\n                      {/* <td>{c.dateOfCollection}</td> */}\n                      <td>{c.Customer}</td>\n                      <td>{c.Officer}</td>\n                      <td>{formatter.format(c.Amount)}</td>\n                      <td>{c.ModeOfPayment}</td>\n                      <td>{c.status}</td>\n                      <td>{c.loanId}</td>\n                      <td>\n                        <CButton\n                          color=\"success btn-sm\"\n                          onClick={() => showModal(c)}\n                        >\n                          Select\n                        </CButton>\n                      </td>\n                    </tr>\n                  ))}\n                </tbody>\n              </Table>\n            </CCardBody>\n          </CCard>\n        </CCol>\n      </CRow>\n      <Modal\n        className=\"modalCustomer fade \"\n        size=\"md\"\n        show={show}\n        data-backdrop=\"static\"\n        data-keyboard=\"false\"\n        closeButton\n        align=\"left\"\n      >\n        <Modal.Body className=\"modal-body col-sm-12\">\n          <form>\n            <CLabel htmlFor=\"nameOfOfficer\" className=\"form-label\">\n              Name of Customer\n            </CLabel>\n            <CInput\n              name=\"nameOfCustomer\"\n              className=\"text-left\"\n              type=\"text\"\n              id=\"nameOfCustomer\"\n              value={allData.customer}\n              autoComplete=\"off\"\n            />\n\n            <CLabel htmlFor=\"Balance\" className=\"form-label\">\n              Officer\n            </CLabel>\n            <CInput\n              name=\"Balance\"\n              className=\"form-control  text-left\"\n              type=\"text\"\n              id=\"Balance\"\n              value={allData.officer}\n              autoComplete=\"off\"\n            />\n\n            <CLabel htmlFor=\"amountReceived\" className=\"form-label\">\n              Mode Of Payment\n            </CLabel>\n            <CInput\n              autoComplete=\"off\"\n              type=\"text\"\n              name=\"amountReceived\"\n              className=\"form-control  text-right\"\n              id=\"amountReceived\"\n              value={allData.modeOfPayment}\n              onChange={null}\n            />\n\n            <CLabel htmlFor=\"comment\" className=\"form-label\">\n              Status\n            </CLabel>\n            <CInput\n              autoComplete=\"off\"\n              type=\"textArea\"\n              name=\"comment\"\n              className=\"form-control text-left\"\n              id=\"comment\"\n              value={allData.status}\n              autoComplete=\"off\"\n              onChange={null}\n            />\n            <CLabel htmlFor=\"comment\" className=\"form-label\">\n              Loan ID\n            </CLabel>\n            <CInput\n              autoComplete=\"off\"\n              type=\"textArea\"\n              name=\"comment\"\n              className=\"form-control text-left\"\n              id=\"comment\"\n              value={allData.loanId}\n              autoComplete=\"off\"\n              onChange={null}\n            />\n            <CLabel htmlFor=\"Balance\" className=\"form-label\">\n              Amount (GHC)\n            </CLabel>\n            <CInput\n              name=\"Balance\"\n              className=\"form-control  text-left\"\n              type=\"text\"\n              id=\"Balance\"\n              value={ds.amount}\n              onChange={(e) => setDs({ ...ds, amount: e.currentTarget.value })}\n              autoComplete=\"off\"\n            />\n          </form>\n        </Modal.Body>\n        <Modal.Footer>\n          <CButton onClick={handleCorrection} color=\"success\">\n            Submit\n          </CButton>\n\n          <CButton onClick={() => setShow(false)} color=\"danger\">\n            Close\n          </CButton>\n        </Modal.Footer>\n      </Modal>\n    </div>\n  )\n}\n\nexport default ViewToCorrectRepayment\n"],"sourceRoot":""}