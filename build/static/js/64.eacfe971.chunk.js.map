{"version":3,"sources":["views/pages/changePassword.jsx"],"names":["ChangePassword","navigate","useHistory","user","auth","getCurrentUser","useState","username","password","userAccount","setUserAccount","handleSubmit","e","a","console","log","preventDefault","axios","put","apiUrl","id","status","Swal","fire","push","className","htmlFor","type","value","nameOfStaff","aria-label","userRole","branch","onChange","target","confirmPassword","color","onClick"],"mappings":"qUA4LeA,UA/IQ,WAErB,IAAMC,EAAWC,cACXC,EAAOC,IAAKC,iBAHS,EAKWC,mBAAS,CAC7CC,SAAU,GACVC,SAAU,KAPe,mBAKpBC,EALoB,KAKPC,EALO,KAUrBC,EAAY,uCAAG,WAAOC,GAAP,SAAAC,EAAA,6DACnBC,QAAQC,IAAIN,GACZK,QAAQC,IAAIZ,GACZS,EAAEI,iBAHiB,kBAKKC,IAAMC,IAC1BC,SAAS,eAAiBhB,EAAKiB,GAAK,IAAMX,EAAYD,UANvC,UASM,MATN,OASLa,OATK,0CAURC,IAAKC,KAAK,OAAQ,eAAgB,UAV1B,QAYfD,IAAKC,KAAK,gCAAiC,WAC3Cb,EAAe,CACbH,SAAU,GACVC,SAAU,KAEZP,EAASuB,KAAK,SAjBC,0DAoBjBF,IAAKC,KAAK,eAAiB,SApBV,0DAAH,sDAsClB,OACE,yBAAKE,UAAU,aACb,wBAAIA,UAAU,cAAd,wBACA,uBAAGA,UAAU,UAAb,8NAOA,yBAAKA,UAAU,YACb,2BAAOC,QAAQ,cAAcD,UAAU,YAAvC,YAGA,kBAAC,IAAD,CACEE,KAAK,OACLF,UAAU,WACVL,GAAG,cACHQ,MAAOzB,EAAK0B,eAGhB,yBAAKJ,UAAU,YACb,2BAAOC,QAAQ,WAAWD,UAAU,aAApC,YAGA,kBAAC,IAAD,CACEE,KAAK,OACLF,UAAU,WACVL,GAAG,WACHQ,MAAOzB,EAAKI,YAGhB,yBAAKkB,UAAU,YACb,2BAAOC,QAAQ,SAASD,UAAU,YAAlC,aAGA,kBAAC,IAAD,CACEE,KAAK,OACLF,UAAU,WACVK,aAAW,yBACXF,MAAOzB,EAAK4B,YAGhB,yBAAKN,UAAU,YACb,2BAAOC,QAAQ,SAASD,UAAU,YAAlC,UAGA,kBAAC,IAAD,CACEE,KAAK,OACLF,UAAU,WACVK,aAAW,yBACXF,MAAOzB,EAAK6B,UAGhB,yBAAKP,UAAU,YACb,2BAAOC,QAAQ,WAAWD,UAAU,YAApC,gBAGA,kBAAC,IAAD,CACEE,KAAK,WACLF,UAAU,WACVG,MAAOnB,EAAYD,SACnByB,SAAU,SAACrB,GAAD,OACRF,EAAe,2BAAKD,GAAN,IAAmBD,SAAUI,EAAEsB,OAAON,aAI1D,yBAAKH,UAAU,YACb,2BAAOC,QAAQ,kBAAkBD,UAAU,YAA3C,oBAGA,kBAAC,IAAD,CACEE,KAAK,WACLF,UAAU,WACVG,MAAOnB,EAAY0B,gBACnBF,SAAU,SAACrB,GAAD,OACRF,EAAe,2BACVD,GADS,IAEZ0B,gBAAiBvB,EAAEsB,OAAON,aAMlC,kBAAC,IAAD,CACEH,UAAU,mCACVW,MAAM,SACNC,QAAS1B,GAHX","file":"static/js/64.eacfe971.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport axios from 'axios'\nimport moment from 'moment'\nimport Swal from 'sweetalert2'\nimport auth from '../../components/services/authService'\nimport { useHistory } from 'react-router-dom'\nimport { apiUrl } from '../../config.json'\n\nimport {\n  CBadge,\n  CCard,\n  CCardBody,\n  //CCardHeader,\n  CCol,\n  CDataTable,\n  CRow,\n  CButton,\n  CModal,\n  CModalFooter,\n  CModalHeader,\n  CModalBody,\n  CCardHeader,\n  CInputGroupAppend,\n  CInputGroupPrepend,\n  CDropdownItem,\n  CForm,\n  //CCardFooter,\n  CDropdownToggle,\n  //CInputRadio,\n  CDropdown,\n  CDropdownDivider,\n  CModalTitle,\n  //CFormText,\n  //CTextarea,\n  CFormGroup,\n  CLabel,\n  // CSwitch,\n  CInput,\n  //CInputFile,\n  CSelect,\n  CDropdownMenu,\n  //CCardFooter,\n  CInputGroup,\n  //CForm,\n} from '@coreui/react'\nconst ChangePassword = () => {\n  //const { addToast } = useToasts()\n  const navigate = useHistory()\n  const user = auth.getCurrentUser()\n\n  const [userAccount, setUserAccount] = useState({\n    username: '',\n    password: '',\n  })\n\n  const handleSubmit = async (e) => {\n    console.log(userAccount)\n    console.log(user)\n    e.preventDefault()\n    try {\n      const results = await axios.put(\n        apiUrl + '/setup/user/' + user.id + '/' + userAccount.password,\n      )\n\n      if (results.status !== 200) {\n        return Swal.fire('OOPS', 'Unsuccessful', 'error')\n      } else {\n        Swal.fire('Password Changed Successfully', 'success')\n        setUserAccount({\n          username: '',\n          password: '',\n        })\n        navigate.push('/home')\n      }\n    } catch (err) {\n      Swal.fire('OOPS ! ' + err, 'error')\n    }\n  }\n\n  function genPassword() {\n    let chars = '123456789abcdefghijklmnpqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ'\n    let passwordLength = 8\n    let tempPassword = ''\n    for (let i = 0; i <= passwordLength; i++) {\n      let randomNumber = Math.floor(Math.random() * chars.length)\n      tempPassword += chars.substring(randomNumber, randomNumber + 1)\n    }\n    setUserAccount({\n      ...userAccount,\n      password: tempPassword,\n      confirmPassword: tempPassword,\n    })\n  }\n  return (\n    <div className=\"container\">\n      <h1 className=\"centertext\">Change User Password</h1>\n      <p className=\"staffp\">\n        A user account is an established technique for connecting a user and an\n        information service and/or computer network. User accounts determine\n        whether or not a user can connect to a computer, network or similar\n        networks.\n      </p>\n\n      <div className=\"row mb-3\">\n        <label htmlFor=\"nameOfStaff\" className=\"col-sm-3\">\n          FullName\n        </label>\n        <CInput\n          type=\"text\"\n          className=\"col-sm-6\"\n          id=\"nameOfStaff\"\n          value={user.nameOfStaff}\n        />\n      </div>\n      <div className=\"row mb-3\">\n        <label htmlFor=\"username\" className=\" col-sm-3\">\n          Username\n        </label>\n        <CInput\n          type=\"text\"\n          className=\"col-sm-6\"\n          id=\"username\"\n          value={user.username}\n        />\n      </div>\n      <div className=\"row mb-3\">\n        <label htmlFor=\"gender\" className=\"col-sm-3\">\n          User Role\n        </label>\n        <CInput\n          type=\"text\"\n          className=\"col-sm-6\"\n          aria-label=\"Default select example\"\n          value={user.userRole}\n        />\n      </div>\n      <div className=\"row mb-3\">\n        <label htmlFor=\"branch\" className=\"col-sm-3\">\n          Branch\n        </label>\n        <CInput\n          type=\"text\"\n          className=\"col-sm-6\"\n          aria-label=\"Default select example\"\n          value={user.branch}\n        />\n      </div>\n      <div className=\"row mb-3\">\n        <label htmlFor=\"password\" className=\"col-sm-3\">\n          New Password\n        </label>\n        <CInput\n          type=\"password\"\n          className=\"col-sm-6\"\n          value={userAccount.password}\n          onChange={(e) =>\n            setUserAccount({ ...userAccount, password: e.target.value })\n          }\n        />\n      </div>\n      <div className=\"row mb-3\">\n        <label htmlFor=\"confirmpassword\" className=\"col-sm-3\">\n          Confirm Password\n        </label>\n        <CInput\n          type=\"password\"\n          className=\"col-sm-6\"\n          value={userAccount.confirmPassword}\n          onChange={(e) =>\n            setUserAccount({\n              ...userAccount,\n              confirmPassword: e.target.value,\n            })\n          }\n        />\n      </div>\n\n      <CButton\n        className=\"btn-sm col-sm-3 mt-3 float-right\"\n        color=\"danger\"\n        onClick={handleSubmit}\n      >\n        Submit\n      </CButton>\n    </div>\n  )\n}\n\nexport default ChangePassword\n"],"sourceRoot":""}