{"version":3,"sources":["views/pages/viewCollateralWithdrawals.jsx"],"names":["ViewCollateralWithdrawals","useState","auth","getCurrentUser","user","withdrawals","setWithdrawals","render","setRender","customer","amount","narration","entryBy","staff","idNumber","dr","date","Date","setItems","toISOString","slice","startDate","setStartDate","endDate","setEndDate","useHistory","useEffect","a","axios","get","apiUrl","results","data","getData","formatter","Intl","NumberFormat","style","currency","totalAmt","reduce","i","Dr","className","class","htmlFor","type","id","value","onChange","e","currentTarget","format","map","c","index","key","fullName","tDate","onClick","item","tdate","Swal","fire","title","showDenyButton","showCancelButton","confirmButtonText","denyButtonText","then","result","isConfirmed","console","log","put","isDenied","color","url","reportUrl","window","open"],"mappings":"8UA2SeA,UApNmB,WAAO,IAAD,EACdC,mBAASC,IAAKC,gBADA,mBAC/BC,EAD+B,aAEAH,mBAAS,KAFT,mBAE/BI,EAF+B,KAElBC,EAFkB,OAGEL,mBAAS,IAHX,gCAIdA,oBAAS,IAJK,gCAKVA,oBAAS,IALC,mBAK/BM,EAL+B,KAKvBC,EALuB,OAMRP,mBAAS,GAND,gCAOEA,mBAAS,IAPX,gCAQVA,mBAAS,KARC,gCAShBA,mBAAS,IATO,gCAURA,mBAAS,IAVD,gCAWRA,mBAAS,CACrCQ,SAAU,EACVC,OAAQ,EACRC,UAAW,GACXC,QAASR,EAAKS,SAfsB,gCAiBZZ,mBAAS,CACjCa,SAAU,GACVC,GAAI,EACJJ,UAAW,GACXK,KAAM,IAAIC,QArB0B,mBAiBxBC,GAjBwB,aAuBNjB,mBAAS,GAvBH,gCAwBAA,mBAAS,IAxBT,gCAyBJA,oBAChC,IAAIgB,MAAOE,cAAcC,MAAM,EAAG,MA1BE,mBAyB/BC,EAzB+B,KAyBpBC,EAzBoB,OA4BRrB,oBAAS,IAAIgB,MAAOE,cAAcC,MAAM,EAAG,KA5BnC,mBA4B/BG,EA5B+B,KA4BtBC,EA5BsB,KA6BvBC,cAEfC,qBAAU,WAAM,4CACd,4BAAAC,EAAA,sEACwBC,IAAMC,IAC1BC,SACE,oCACAT,EACA,IACAE,GANN,OACQQ,EADR,OAQEzB,EAAeyB,EAAQC,MARzB,4CADc,uBAAC,WAAD,wBAWdC,KACC,CAACZ,EAAWE,EAAShB,IAExB,IAWI2B,GAAY,IAAIC,KAAKC,aAAa,QAAS,CAC7CC,MAAO,WACPC,SAAU,QAONC,GAAWlC,EAAYmC,QAAO,SAACb,EAAGc,GACtC,OAAOd,EAAIc,EAAEC,KACZ,GAkDH,OACE,yBAAKC,UAAU,mBACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,kBACb,yBAAKA,UAAU,8BACb,wBAAIA,UAAU,mBAAd,8CAKF,uBAAGA,UAAU,aAAb,8IAMA,yBAAKC,MAAM,2BACT,kBAAC,KAAD,CAAQC,QAAQ,eAAeF,UAAU,cAAzC,cAGA,yBAAKA,UAAU,YACb,kBAAC,IAAD,CACEG,KAAK,OACLF,MAAM,eACNG,GAAG,eACHC,MAAO3B,EACP4B,SA9FgB,SAACC,GAC7B5B,EAAa4B,EAAEC,cAAcH,WAgGrB,kBAAC,KAAD,CAAQH,QAAQ,eAAeF,UAAU,cAAzC,YAGA,yBAAKA,UAAU,YACb,kBAAC,IAAD,CACEG,KAAK,OACLF,MAAM,eACNG,GAAG,eACHC,MAAOzB,EACP0B,SAvGc,SAACC,GAC3B1B,EAAW0B,EAAEC,cAAcH,WAyGnB,yBAAKL,UAAU,uBAAf,cACa,gCAAST,GAAUkB,OAAOb,OAGzC,kBAAC,IAAD,CAAOI,UAAU,sBACf,2BAAOA,UAAU,IACf,wBAAIA,UAAU,SACZ,6BACA,kCACA,sCACA,oCACA,sCACA,6CAGJ,+BACGtC,EAAYgD,KAAI,SAACC,EAAGC,GAAJ,OACf,wBAAIC,IAAKF,EAAEP,IACT,4BAAKQ,EAAQ,GACb,4BAAKD,EAAExC,UACP,4BAAKwC,EAAEG,UACP,4BAAKH,EAAEI,OACP,4BAAKxB,GAAUkB,OAAOE,EAAEZ,KACxB,4BAAKY,EAAE3C,WACP,4BAEI,kBAAC,IAAD,CACEgD,QAAS,kBArG7BzC,EAAS,CACP6B,IAFuBa,EAsG4BN,GApG1CP,GACTjC,SAAU8C,EAAK9C,SACfC,GAAI6C,EAAKlB,GACT/B,UAAWiD,EAAKjD,UAChBK,KAAM,IAAIC,KAAK2C,EAAKC,cAGtBC,IAAKC,KAAK,CACRC,MAAO,2CACPC,gBAAgB,EAChBC,kBAAkB,EAClBC,kBAAmB,UACnBC,eAAe,UACdC,KANH,uCAMQ,WAAOC,GAAP,SAAA3C,EAAA,0DAEF2C,EAAOC,YAFL,uBAGJC,QAAQC,IAAIb,GAHR,SAIYhC,IAAM8C,IAAI5C,SAAS,gCAAiC,CAClEiB,GAAIa,EAAKb,GACTjC,SAAU8C,EAAK9C,SACfC,GAAI6C,EAAKlB,GACT/B,UAAWiD,EAAKjD,UAChBK,KAAM4C,EAAKC,QATT,cAYJC,IAAKC,KAAK,YAAa,GAAI,WAC3BvD,GAAWD,GAbP,uBAcK+D,EAAOK,UAChBb,IAAKC,KAAK,YAAa,GAAI,QAfvB,4CANR,uDATwB,IAACH,GAuGLjB,UAAU,0BACViC,MAAM,UAHR,kBAaZ,kBAAC,IAAD,CACEjB,QAAS,kBAxHekB,EAyHGC,YAAY,gCAvH/CC,OAAOC,KAAKH,EAAK,eAAgB,QADV,yCADQ,IAACA,GA2HxBlC,UAAU,8BACViC,MAAM,WALR","file":"static/js/87.00d54f7c.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport {\n  Link,\n  useNavigate,\n  Navigate,\n  useParams,\n  useHistory,\n} from 'react-router-dom'\nimport axios from 'axios'\nimport moment from 'moment'\nimport { Modal } from 'react-bootstrap'\nimport auth from '../../components/services/authService'\nimport Joi from 'joi-browser'\nimport Swal from 'sweetalert2'\nimport { apiUrl } from '../../config.json'\n\nimport {\n  Row,\n  Col,\n  Table,\n  Progress,\n  Button,\n  UncontrolledButtonDropdown,\n  DropdownMenu,\n  DropdownToggle,\n  DropdownItem,\n  Input,\n  Badge,\n  //Modal,\n} from 'reactstrap'\nimport { reportUrl } from '../../config.json'\n\nimport {\n  CBadge,\n  CCard,\n  CCardBody,\n  //CCardHeader,\n  CCol,\n  CDataTable,\n  CRow,\n  CButton,\n  CModal,\n  CModalFooter,\n  CModalHeader,\n  CModalBody,\n  CCardHeader,\n  CInputGroupAppend,\n  CInputGroupPrepend,\n  CDropdownItem,\n  CForm,\n  //CCardFooter,\n  CDropdownToggle,\n  //CInputRadio,\n  CDropdown,\n  CDropdownDivider,\n  CModalTitle,\n  //CFormText,\n  //CTextarea,\n  CFormGroup,\n  CLabel,\n  // CSwitch,\n  CInput,\n  //CInputFile,\n  CSelect,\n  CDropdownMenu,\n  //CCardFooter,\n  CInputGroup,\n  //CForm,\n} from '@coreui/react'\n\n/*import {\n  LineChart,\n  BarChart,\n  Line,\n  CartesianGrid,\n  XAxis,\n  YAxis,\n  Tooltip,\n  Bar,\n  Cell,\n  Label,\n  Legend,\n  ResponsiveContainer,\n} from 'recharts'\n*/\nimport { GiSatelliteCommunication } from 'react-icons/gi'\n\nconst ViewCollateralWithdrawals = () => {\n  const [user, setUser] = useState(auth.getCurrentUser)\n  const [withdrawals, setWithdrawals] = useState([])\n  const [customerName, setCustomerName] = useState('')\n  const [show, setShow] = useState(false)\n  const [render, setRender] = useState(false)\n  const [sumPaid, setSumPaid] = useState(0)\n  const [sumWithdrawn, setSumWithdrawn] = useState(0)\n  const [search, setSearch] = useState('')\n  const [bal, setBal] = useState(0)\n  const [loanBal, setLoanBal] = useState(0)\n  const [deposit, setDeposit] = useState({\n    customer: 0,\n    amount: 0,\n    narration: '',\n    entryBy: user.staff,\n  })\n  const [items, setItems] = useState({\n    idNumber: '',\n    dr: 0,\n    narration: '',\n    date: new Date(),\n  })\n  const [pageSize, setPageSize] = useState(5)\n  const [currentPage, setCurrentPage] = useState(1)\n  const [startDate, setStartDate] = useState(\n    new Date().toISOString().slice(0, 10),\n  )\n  const [endDate, setEndDate] = useState(new Date().toISOString().slice(0, 10))\n  let navigate = useHistory()\n\n  useEffect(() => {\n    async function getData() {\n      const results = await axios.get(\n        apiUrl +\n          '/loan/cashcollateral/withdrawals/' +\n          startDate +\n          '/' +\n          endDate,\n      )\n      setWithdrawals(results.data)\n    }\n    getData()\n  }, [startDate, endDate, render])\n\n  const handleSearch = (event) => {\n    setSearch(event.target.value)\n  }\n\n  const handleStartDateChange = (e) => {\n    setStartDate(e.currentTarget.value)\n  }\n  const handleEndDateChange = (e) => {\n    setEndDate(e.currentTarget.value)\n  }\n\n  let formatter = new Intl.NumberFormat('en-US', {\n    style: 'currency',\n    currency: 'GHS',\n\n    // These options are needed to round to whole numbers if that's what you want.\n    //minimumFractionDigits: 0, // (this suffices for whole numbers, but will print 2500.10 as $2,500.1)\n    //maximumFractionDigits: 0, // (causes 2500.99 to be printed as $2,501)\n  })\n\n  const totalAmt = withdrawals.reduce((a, i) => {\n    return a + i.Dr\n  }, 0)\n\n  const handleClose = () => {\n    setDeposit({\n      customer: 0,\n      amount: 0,\n      entryBy: user.staff,\n      narration: '',\n    })\n    setShow(false)\n  }\n  const openCustomerListAsReport = (url) => {\n    const windowFeatures = 'left=100,top=100,width=320,height=320'\n    window.open(url, 'customerlist', 'popup', windowFeatures)\n  }\n\n  const reverseWithdrawal = (item) => {\n    setItems({\n      id: item.id,\n      idNumber: item.idNumber,\n      dr: item.Dr,\n      narration: item.narration,\n      date: new Date(item.tdate),\n    })\n    // console.log(item)\n    Swal.fire({\n      title: 'Do you want to REVERSE this transaction?',\n      showDenyButton: true,\n      showCancelButton: true,\n      confirmButtonText: 'Reverse',\n      denyButtonText: `Don't`,\n    }).then(async (result) => {\n      /* Read more about isConfirmed, isDenied below */\n      if (result.isConfirmed) {\n        console.log(item)\n        const r = await axios.put(apiUrl + '/loan/cashcollateral/reversal', {\n          id: item.id,\n          idNumber: item.idNumber,\n          dr: item.Dr,\n          narration: item.narration,\n          date: item.tdate,\n        })\n\n        Swal.fire('Reversed!', '', 'success')\n        setRender(!render)\n      } else if (result.isDenied) {\n        Swal.fire('Cancelled', '', 'info')\n      }\n    })\n  }\n  return (\n    <div className=\"container-fluid\">\n      <div className=\"row\">\n        <div className=\"col-sm-12 mt-2\">\n          <div className=\"row justify-content-center\">\n            <h4 className=\"centertext mb-3\">\n              Cash Collateral Withdrawals and Transfers\n            </h4>\n          </div>\n\n          <p className=\"text-left\">\n            NB: The list shows customer collateral withdrawals and Transfers.\n            You can filter by selecting a date range. Using the start and end\n            Dates.\n          </p>\n\n          <div class=\"mb-3 row mt-5 col-sm-12\">\n            <CLabel htmlFor=\"dateOnCheque\" className=\"form-label\">\n              Start Date\n            </CLabel>\n            <div className=\"col-sm-3\">\n              <CInput\n                type=\"date\"\n                class=\"form-control\"\n                id=\"dateOnCheque\"\n                value={startDate}\n                onChange={handleStartDateChange}\n              />\n            </div>\n            <CLabel htmlFor=\"dateOnCheque\" className=\"form-label\">\n              End Date\n            </CLabel>\n            <div className=\"col-sm-3\">\n              <CInput\n                type=\"date\"\n                class=\"form-control\"\n                id=\"dateOnCheque\"\n                value={endDate}\n                onChange={handleEndDateChange}\n              />\n            </div>\n            <div className=\"col-sm-4 text-right\">\n              Total Amt: <strong>{formatter.format(totalAmt)}</strong>\n            </div>\n          </div>\n          <Table className=\"table-sm col-sm-12\">\n            <thead className=\"\">\n              <tr className=\"fs-sm\">\n                <th></th>\n                <th>ID</th>\n                <th>Drawer</th>\n                <th>Date</th>\n                <th>Amount</th>\n                <th>Description</th>\n              </tr>\n            </thead>\n            <tbody>\n              {withdrawals.map((c, index) => (\n                <tr key={c.id}>\n                  <td>{index + 1}</td>\n                  <td>{c.idNumber}</td>\n                  <td>{c.fullName}</td>\n                  <td>{c.tDate}</td>\n                  <td>{formatter.format(c.Dr)}</td>\n                  <td>{c.narration}</td>\n                  <td>\n                    {\n                      <CButton\n                        onClick={() => reverseWithdrawal(c)}\n                        className=\"btn-sm float-right mt-3\"\n                        color=\"danger\"\n                      >\n                        Reverse\n                      </CButton>\n                    }\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </Table>\n          <CButton\n            onClick={() =>\n              openCustomerListAsReport(reportUrl + '/collateralBalances.aspx')\n            }\n            className=\"btn-sm float-left mt-3 mb-3\"\n            color=\"success\"\n          >\n            Collateral Balances\n          </CButton>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default ViewCollateralWithdrawals\n"],"sourceRoot":""}