{"version":3,"sources":["views/pages/bulkCashReceipts.jsx"],"names":["BulkCashReceipts","useState","auth","getCurrentUser","user","received","setReceived","staff","setStaff","setOfficer","show","setShow","reload","setReload","chartData","Date","toISOString","slice","chartDate","setChartDate","Officer","dateOfReceipt","Momo","Cash","TotalAmount","Overage","Shortage","receivedBy","nameOfStaff","bulkCash","setBulkCash","tdate","setTdate","useEffect","a","axios","get","apiUrl","results","data","getStaff","getBulkCash","schemaMap","Joi","string","required","label","date","number","default","allow","schema","object","validateForm","result","validate","error","details","message","handleSubmit","console","log","Swal","fire","post","status","formatter","Intl","NumberFormat","style","currency","handleRemove","c","delete","id","officerId","myData","map","m","d","Amount","amount","push","className","type","onClick","name","value","onChange","e","currentTarget","index","key","_id","moment","format","color","size","data-backdrop","data-keyboard","onClose","closeButton","htmlFor","aria-label","defaultValue","b","autoComplete","TotalAmt","parseFloat"],"mappings":"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","file":"static/js/12.c852201a.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { Modal } from 'react-bootstrap'\nimport { Link, useNavigate, Navigate, useHistory } from 'react-router-dom'\nimport axios from 'axios'\nimport moment from 'moment'\nimport Joi from 'joi-browser'\nimport CurrencyFormat from 'react-currency-format'\nimport Swal from 'sweetalert2'\nimport auth from '../../components/services/authService'\nimport { apiUrl } from '../../config.json'\nimport BookProduct from './bookProduct'\nimport LoanPrincipal from './loanPrincipalEntry'\nimport Guarantors from './guarantors'\nimport GuarantorTwo from './guarantorTwo'\nimport BusinessDetails from './businessDetails'\nimport Directions from './directions'\nimport AdaboSelect from 'react-select'\nimport {\n  Row,\n  Col,\n  Table,\n  Progress,\n  Button,\n  UncontrolledButtonDropdown,\n  DropdownMenu,\n  DropdownToggle,\n  DropdownItem,\n  Input,\n  Badge,\n  Card,\n  //Modal,\n} from 'reactstrap'\nimport {\n  CBadge,\n  CCard,\n  CCardBody,\n  //CCardHeader,\n  CCol,\n  CDataTable,\n  CRow,\n  CButton,\n  CModal,\n  CModalFooter,\n  CModalHeader,\n  CModalBody,\n  CCardHeader,\n  CInputGroupAppend,\n  CInputGroupPrepend,\n  CDropdownItem,\n  CForm,\n  //CCardFooter,\n  CDropdownToggle,\n  //CInputRadio,\n  CDropdown,\n  CDropdownDivider,\n  CModalTitle,\n  //CFormText,\n  //CTextarea,\n  CFormGroup,\n  CLabel,\n  // CSwitch,\n  CInput,\n  //CInputFile,\n  CSelect,\n  CDropdownMenu,\n  //CCardFooter,\n  CInputGroup,\n  //CForm,\n} from '@coreui/react'\nimport { render } from 'enzyme'\n\nconst BulkCashReceipts = () => {\n  const [user, setUser] = useState(auth.getCurrentUser)\n  const [received, setReceived] = useState([])\n  const [staff, setStaff] = useState([])\n  const [officer, setOfficer] = useState('')\n  const [search, setSearch] = useState('')\n  const [show, setShow] = useState(false)\n  const [reload, setReload] = useState(false)\n  const [chartData, setChartData] = useState([])\n  const [chartDate, setChartDate] = useState(\n    new Date().toISOString().slice(0, 10),\n  )\n  const [todayDate, setTodayDate] = useState(new Date())\n  const formatToday = (date) => date.toISOString().slice(0, 10)\n  const [overageShortageChecked, setOverageShortageChecked] = useState(false)\n  // const [shortageChecked, setShortageChecked] = useState(false);\n  const [bulkCash, setBulkCash] = useState({\n    Officer: '',\n    dateOfReceipt: new Date().toISOString().slice(0, 10),\n    Momo: '',\n    Cash: '',\n    TotalAmount: '',\n    Overage: '',\n    Shortage: '',\n    receivedBy: user.nameOfStaff,\n  })\n  const [tdate, setTdate] = useState(new Date().toISOString().slice(0, 10))\n\n  useEffect(() => {\n    async function getStaff() {\n      const results = await axios.get(apiUrl + '/setup/staff')\n      setStaff(results.data)\n    }\n\n    getStaff()\n  }, [])\n\n  useEffect(() => {\n    async function getBulkCash() {\n      const results = await axios.get(apiUrl + '/loan/bulkCash/' + tdate)\n      setReceived(results.data)\n    }\n    getBulkCash()\n    //console.log(received);\n  }, [tdate, reload])\n\n  /*const handleSearch = (event) => {\n    setSearch(event.currentTarget.value);\n  };\n\n  const data = {\n    staff: staff.filter((c) =>\n      c.nameOfStaff.toLowerCase().includes(search.toLowerCase())\n    ),\n  };\n\n  const dataTouse = search.length === 0 ? staff : data.staff;\n*/\n  const handleOfficerSelect = (c) => {\n    setBulkCash({\n      ...bulkCash,\n      Officer: c.currentTarget.value,\n      Overage: 0,\n      Shortage: 0,\n    })\n    //setOfficer(c.nameOfStaff);\n    // setShow(!show);\n  }\n\n  const handleSelectBulkCash = (c) => {\n    setBulkCash({\n      ...bulkCash,\n      dateOfReceipt: c.dateOfReceipt,\n      Officer: c.Officer,\n      receivedBy: c.receivedBy,\n      overageshortage: c.overageshortage,\n      Momo: c.Momo,\n      Cash: c.Cash,\n      TotalAmount: c.TotalAmount,\n      Overage: 0,\n      Shortage: 0,\n    })\n    setShow(!show)\n  }\n\n  const handleMomoEntry = (e) => {\n    const TotalAmt =\n      parseFloat(bulkCash.Cash) + parseFloat(e.currentTarget.value)\n    setBulkCash({\n      ...bulkCash,\n      Momo: e.currentTarget.value,\n      TotalAmount: TotalAmt,\n    })\n  }\n\n  const handleCashEntry = (e) => {\n    const TotalAmt =\n      parseFloat(bulkCash.Momo) + parseFloat(e.currentTarget.value)\n    setBulkCash({\n      ...bulkCash,\n      Cash: e.currentTarget.value,\n      TotalAmount: TotalAmt,\n    })\n  }\n  const schemaMap = {\n    Officer: Joi.string().required().label('Field Officer'),\n    dateOfReceipt: Joi.date().required().label('Date of Collection'),\n    Momo: Joi.number().required().label('Momo Received'),\n    Cash: Joi.number().required().label('Cash Received'),\n    TotalAmount: Joi.number().required().label('Total Amount'),\n    Overage: Joi.number().default(0),\n    Shortage: Joi.number().default(0),\n    receivedBy: Joi.string().allow(''),\n  }\n\n  const schema = Joi.object(schemaMap)\n\n  const validateForm = () => {\n    const result = Joi.validate(bulkCash, schema)\n    if (result.error) {\n      return result.error.details[0].message\n    } else {\n      return null\n    }\n  }\n\n  const handleSubmit = async () => {\n    console.log(bulkCash)\n    const validate = validateForm()\n    if (validate !== null) {\n      return Swal.fire('Validation', validate, 'error')\n    }\n    try {\n      const results = await axios.post(apiUrl + '/loan/bulkcash', bulkCash)\n      if (results.status !== 200) {\n        return Swal.fire(\n          'OOPs !',\n          'Submission Failed ! Check Entries and try again !',\n          'error',\n        )\n      } else {\n        Swal.fire('Good job!', 'Bulk Cash Received Successfully', 'success')\n        setBulkCash({\n          Officer: '',\n          dateOfReceipt: new Date().toISOString().slice(0, 10),\n          Momo: '',\n          Cash: '',\n          TotalAmount: '',\n          Overage: '',\n          Shortage: '',\n          receivedBy: user.nameOfStaff,\n        })\n        setReload(!reload)\n      }\n    } catch (err) {\n      Swal.fire('OOPS ! ', 'Bulk Cash NOT Received', 'error')\n    }\n  }\n\n  let formatter = new Intl.NumberFormat('en-US', {\n    style: 'currency',\n    currency: 'GHS',\n\n    // These options are needed to round to whole numbers if that's what you want.\n    //minimumFractionDigits: 0, // (this suffices for whole numbers, but will print 2500.10 as $2,500.1)\n    //maximumFractionDigits: 0, // (causes 2500.99 to be printed as $2,501)\n  })\n\n  const handleRemove = async (c) => {\n    console.log(c)\n    try {\n      const results = await axios.delete(\n        apiUrl +\n          '/loan/bulkCash/' +\n          c.id +\n          '/' +\n          c.officerId +\n          '/' +\n          c.dateOfReceipt,\n      )\n      if (results.status === 200) {\n        Swal.fire('OK', 'Bulk Cash Deleted', 'success')\n        setBulkCash({\n          Officer: '',\n          dateOfReceipt: new Date().toISOString().slice(0, 10),\n          Momo: '',\n          Cash: '',\n          TotalAmount: '',\n          Overage: '',\n          Shortage: '',\n          receivedBy: user.nameOfStaff,\n        })\n        setReload(!reload)\n        setTdate(new Date().toISOString().slice(0, 10))\n      } else {\n        return Swal.fire('OOPS', 'Bulk Cash NOT Deleted', 'error')\n      }\n    } catch (ex) {\n      return Swal.fire('OOPS', ex + '  [Bulk Cash NOT Deleted]', 'error')\n    }\n  }\n\n  const handleClose = () => {\n    setBulkCash({\n      Officer: '',\n      dateOfReceipt: new Date().toISOString().slice(0, 10),\n      Momo: '',\n      Cash: '',\n      TotalAmount: '',\n      Overage: '',\n      Shortage: '',\n      receivedBy: user.nameOfStaff,\n    })\n    setOfficer('')\n    setShow(false)\n  }\n\n  const handleOverage = (e) => {\n    setBulkCash({\n      ...bulkCash,\n      Overage: e.currentTarget.value,\n      Shortage: 0,\n    })\n  }\n\n  const handleShortage = (e) => {\n    setBulkCash({\n      ...bulkCash,\n      Shortage: e.currentTarget.value,\n      Overage: 0,\n    })\n  }\n\n  const myData = []\n  const yData = chartData.map((m) => {\n    let d = {\n      Officer: m.Officer.nameOfStaff,\n      Amount: m.amount,\n    }\n    myData.push(d)\n  })\n\n  const handleDateChange = (e) => {\n    setChartDate(e.currentTarget.value)\n    setTdate(e.currentTarget.value)\n    setReload(!reload)\n  }\n\n  const handleEdit = (c) => {\n    console.log(c)\n    setBulkCash({\n      ...bulkCash,\n      dateOfReceipt: new Date(c.dateOfReceipt).toISOString().slice(0, 10),\n      Officer: c.Officer,\n      receivedBy: c.receivedBy,\n      Momo: c.Momo,\n      Cash: c.Cash,\n      TotalAmount: c.TotalAmount,\n      Overage: 0,\n      Shortage: 0,\n      id: c.id,\n    })\n    setShow(!show)\n  }\n\n  return (\n    <div className=\"container-fluid\">\n      <button\n        type=\"button\"\n        className=\"btn btn-success btn-sm float-right\"\n        onClick={() => {\n          setBulkCash({\n            dateOfReceipt: new Date().toISOString().slice(0, 10),\n            Officer: '',\n            receivedBy: user.nameOfStaff,\n            Momo: '',\n            Cash: '',\n            TotalAmount: '',\n            Overage: 0,\n            Shortage: 0,\n          })\n          console.log(bulkCash)\n          setShow(!show)\n        }}\n      >\n        Receive Bulk Collections\n      </button>\n      <input\n        type=\"date\"\n        name=\"dateOfReceipt\"\n        className=\"form-control col-sm-4 mb-3\"\n        id=\"dateOfReceipt\"\n        value={chartDate}\n        onChange={handleDateChange}\n      />\n      <Table className=\"table align-middle mb-0 table-sm\">\n        <thead>\n          <tr className=\"fs-sm\">\n            <th></th>\n            <th>Date</th>\n            <th>Officer</th>\n            <th>Momo</th>\n            <th>Cash</th>\n            <th>Amount</th>\n            <th>Overage</th>\n            <th>Shortage</th>\n            <th></th>\n          </tr>\n        </thead>\n        <tbody>\n          {received.map((c, index) => (\n            <tr key={c._id}>\n              <td>{index + 1}</td>\n              <td>{moment(c.dateOfReceipt).format('DD-MMMM-YYYY')}</td>\n              <td>{c.Officer}</td>\n              <td>{formatter.format(c.Momo)}</td>\n              <td>{formatter.format(c.Cash)}</td>\n              <td>{formatter.format(c.TotalAmount)}</td>\n              <td>{formatter.format(c.Overage)}</td>\n              <td>{formatter.format(c.Shortage)}</td>\n              <td>\n                {c.status == null ? (\n                  <td>\n                    <CButton\n                      className=\"btn-sm\"\n                      color=\"danger\"\n                      onClick={() => handleRemove(c)}\n                    >\n                      Remove\n                    </CButton>\n                  </td>\n                ) : null}\n              </td>\n\n              {/*<td>\n                <CButton\n                  className=\"btn-sm\"\n                  color=\"info\"\n                  onClick={() => handleEdit(c)}\n                >\n                  Edit Entry\n                </CButton>\n              </td>*/}\n            </tr>\n          ))}\n        </tbody>\n      </Table>\n\n      <CModal\n        className=\"fade col-sm-10\"\n        size=\"md\"\n        show={show}\n        color=\"success\"\n        data-backdrop=\"static\"\n        data-keyboard=\"false\"\n        onClose={() => {\n          setShow(!show)\n        }}\n      >\n        <CModalHeader className=\"modal-header\" closeButton>\n          <p>\n            <h3 className=\"centertext\">Receive Bulk Amount</h3>\n          </p>\n        </CModalHeader>\n\n        <CModalBody className=\"modal-body\">\n          <form>\n            <label htmlFor=\"dateOfReceipt\" className=\"form-label\">\n              Date of Receipt\n            </label>\n            <input\n              type=\"date\"\n              name=\"dateOfReceipt\"\n              className=\"form-control text-center col-sm-12 mb-3\"\n              id=\"dateOfReceipt\"\n              value={bulkCash.dateOfReceipt}\n              onChange={(e) =>\n                setBulkCash({\n                  ...bulkCash,\n                  dateOfReceipt: e.currentTarget.value,\n                })\n              }\n            />\n\n            <CSelect\n              className=\"form-select col-sm-12 mb-3\"\n              aria-label=\"Default select example\"\n              value={bulkCash.Officer}\n              onChange={handleOfficerSelect}\n            >\n              <option defaultValue=\"\">--Select Loan Officer--</option>\n              {staff.map((b) => (\n                <option key={b.id} value={b.id} id={b.id}>\n                  {b.nameOfStaff}\n                </option>\n              ))}\n            </CSelect>\n\n            <label htmlFor=\"amountReceived\" className=\"form-label\">\n              Momo Amount (GHS) *\n            </label>\n            <input\n              autoComplete=\"off\"\n              type=\"text\"\n              name=\"amountReceived\"\n              className=\"form-control col-sm-12 mb-3\"\n              id=\"MomoAmount\"\n              value={bulkCash.Momo}\n              onChange={handleMomoEntry}\n            />\n\n            <label htmlFor=\"amountReceived\" className=\"form-label\">\n              Cash Amount (GHS) *\n            </label>\n            <input\n              autoComplete=\"off\"\n              type=\"text\"\n              name=\"amountReceived\"\n              className=\"form-control  col-sm-12 mb-3\"\n              id=\"CashAmount\"\n              value={bulkCash.Cash}\n              onChange={handleCashEntry}\n            />\n\n            <label className=\"form-label mb-3 dispLabel float-right\">\n              Total Amount : {formatter.format(bulkCash.TotalAmount)}\n            </label>\n\n            <label htmlFor=\"overage\" className=\"form-label mt-3\">\n              Overage (if any)\n            </label>\n            <input\n              autoComplete=\"off\"\n              type=\"text\"\n              name=\"overage\"\n              className=\"form-control  col-sm-12 mb-3\"\n              id=\"overage\"\n              value={bulkCash.Overage}\n              onChange={handleOverage}\n            />\n\n            <label htmlFor=\"shortage\" className=\"form-label\">\n              Shortage (if any)\n            </label>\n            <input\n              autoComplete=\"off\"\n              type=\"text\"\n              name=\"shortage\"\n              className=\"form-control  col-sm-12 mb-3\"\n              id=\"shortage\"\n              value={bulkCash.Shortage}\n              onChange={handleShortage}\n            />\n          </form>\n        </CModalBody>\n        <CModalFooter>\n          <CButton onClick={handleSubmit} color=\"success\" className=\"btn-sm\">\n            Submit\n          </CButton>\n          <CButton onClick={handleClose} color=\"danger\" className=\"btn-sm\">\n            Close\n          </CButton>\n        </CModalFooter>\n      </CModal>\n    </div>\n  )\n}\n\nexport default BulkCashReceipts\n"],"sourceRoot":""}