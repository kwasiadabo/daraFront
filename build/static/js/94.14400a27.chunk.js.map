{"version":3,"sources":["views/setup/Grade.js"],"names":["GradeSetup","useState","visible","setVisible","search","setSearch","grades","setGrades","setDisableButton","useEffect","a","axios","get","results","data","getGrades","grade","setGrade","level","setLevel","setDays","joiGradeSchema","Joi","object","keys","string","required","label","days","number","validateEntry","result","validate","error","details","message","handleSubmit","Ldays","post","status","Swal","fire","title","text","icon","response","filter","item","toLowerCase","includes","dataTouse","length","htmlFor","className","id","size","type","onChange","e","currentTarget","value","color","onClick","show","onClose","closeButton","xs","md","action","method","row","name","placeholder","map","s","index","key","_id","console","log","handleEditClicked"],"mappings":"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","file":"static/js/94.14400a27.chunk.js","sourcesContent":["import CIcon from \"@coreui/icons-react\";\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport Joi from \"joi-browser\";\nimport Swal from \"sweetalert2\";\n//import NavHeader from \"../../components/navHeader\";\n//import { toast } from \"react-toastify\";\n\nimport {\n  //CBadge,\n  CCard,\n  CCardBody,\n  //CCardHeader,\n  CCol,\n  //CDataTable,\n  CRow,\n  CButton,\n  CModal,\n  CModalFooter,\n  CModalHeader,\n  CModalBody,\n  CCardHeader,\n  CInputGroupAppend,\n  CInputGroupPrepend,\n  //CDropdownItem,\n  CForm,\n  //CCardFooter,\n  //CDropdownToggle,\n  //CInputRadio,\n  //CDropdown,\n  CModalTitle,\n  //CFormText,\n  //CTextarea,\n  CFormGroup,\n  CLabel,\n  // CSwitch,\n  CInput,\n  //CInputFile,\n  //CSelect,\n  //CDropdownMenu,\n  //CCardFooter,\n  CInputGroup,\n  //CForm,\n} from \"@coreui/react\";\n//import { DocsLink } from 'src/reusable'\n\n//import usersData from './psm/users/usersData';\n\n//import usersData from '../users/UsersData';\n\nconst GradeSetup = () => {\n  const [gradeData, setGradeData] = useState([]);\n\n  const getBadge = (status) => {\n    switch (status) {\n      case \"Active\":\n        return \"success\";\n      case \"Inactive\":\n        return \"secondary\";\n      case \"Pending\":\n        return \"warning\";\n      case \"Banned\":\n        return \"danger\";\n      default:\n        return \"primary\";\n    }\n  };\n\n  //{id: 0, name: 'John Doe', registered: '2018/01/01', role: 'Guest', status: 'Pending', ok: 'Pending'}\n  const fields = [\"_id\", \"Grade\", \"Action\"];\n  const [visible, setVisible] = useState(false);\n  const [search, setSearch] = useState(\"\");\n\n  const [grades, setGrades] = useState([]);\n  const [disableButton, setDisableButton] = useState(false);\n\n  useEffect(() => {\n    async function getGrades() {\n      const results = await axios.get(\n        \"https://ugmcservice.herokuapp.com/api/grades\"\n      );\n      setGrades(results.data);\n    }\n    getGrades();\n  }, [grades]);\n\n  const [grade, setGrade] = useState(\"\");\n  const [level, setLevel] = useState(\"\");\n  const [days, setDays] = useState(\"\");\n\n  const joiGradeSchema = Joi.object().keys({\n    grade: Joi.string().required().label(\"Grade\"),\n    level: Joi.string().required().label(\"Level\"),\n    days: Joi.number().label(\"Days\"),\n  });\n\n  const validateEntry = () => {\n    const result = Joi.validate({ grade, level }, joiGradeSchema);\n    if (result.error) {\n      return result.error.details[0].message;\n    } else {\n      return null;\n    }\n  };\n\n  const handleLevelChange = (e) => {\n    setLevel(e.currentTarget.value);\n  };\n\n  const handleSubmit = async () => {\n    const Ldays =\n      level === \"Management\"\n        ? 42\n        : level === \"Senior\"\n        ? 36\n        : level === \"Middle\"\n        ? 28\n        : 21;\n\n    const validate = validateEntry();\n    if (validate === null) {\n      try {\n        setDisableButton(true);\n        const results = await axios.post(\n          \"https://ugmcservice.herokuapp.com/api/grades\",\n          { grade: grade, level: level, days: Ldays }\n        );\n\n        if (results.status === 200) {\n          Swal.fire({\n            title: \"Success\",\n            text: \"Grade Successfully Added\",\n            icon: \"success\",\n          });\n          setVisible(false);\n        } else {\n          Swal.fire({ title: \"Oops!\", text: \"Grade Failed\", icon: \"danger\" });\n        }\n      } catch (err) {\n        if (err.response && err.response.status === 400) {\n          return Swal.fire({\n            title: \"Oops!\",\n            text: err.response.data,\n            icon: \"danger\",\n          });\n\n          //toast.error(err.response.data);\n        }\n      }\n    } else {\n      Swal.fire(\"Validation Error\", validate, \"error\");\n    }\n    setGrade(\"\");\n    setLevel(\"\");\n    setDays(\"\");\n    setDisableButton(false);\n  };\n  const handleSearch = (e) => {\n    setSearch(e.currentTarget.value);\n  };\n  const handleEditClicked = (s) => {\n    console.log(s);\n  };\n\n  const data = {\n    grades: grades.filter((item) =>\n      item.grade.toLowerCase().includes(search.toLowerCase())\n    ),\n  };\n\n  const dataTouse = search.length === 0 ? grades : data.grades;\n\n  return (\n    <>\n      <CRow>\n        <CCol>\n          <CCard>\n            <div>\n              <CModalHeader>\n                <CCol>\n                  <CFormGroup>\n                    <CLabel htmlFor=\"appendedInputButtons\"></CLabel>\n                    <div className=\"controls\">\n                      <CInputGroup>\n                        <CInput\n                          id=\"appendedInputButtons\"\n                          size=\"16\"\n                          type=\"text\"\n                          onChange={handleSearch}\n                        />\n                        <CInputGroupAppend>\n                          <CCol>\n                            <CButton color=\"primary\">Search</CButton>\n                          </CCol>\n                          <CButton\n                            color=\"primary\"\n                            onClick={() => setVisible(!visible)}\n                          >\n                            + New Grade\n                          </CButton>{\" \"}\n                          <CButton\n                            color=\"success\"\n                            onClick={() => setVisible(!visible)}\n                          >\n                            Export Report\n                          </CButton>\n                        </CInputGroupAppend>\n                      </CInputGroup>\n                    </div>\n                  </CFormGroup>\n                </CCol>\n              </CModalHeader>\n            </div>\n\n            {/*<CButton color=\"success\" onClick={() => setSuccess(!success)} className=\"mr-1\">Success modal</CButton>\n            <CButton color=\"warning\" onClick={() => setWarning(!warning)} className=\"mr-1\">Warning modal</CButton>\n            <CButton color=\"danger\" onClick={() => setDanger(!danger)} className=\"mr-1\">Danger modal</CButton>\n  <CButton color=\"info\" onClick={() => setInfo(!info)} className=\"mr-1\">Info modal</CButton>*/}\n\n            <CModal\n              show={visible}\n              onClose={() => setVisible(!visible)}\n              color=\"primary\"\n              size=\"lg\"\n            >\n              <CModalHeader closeButton>\n                <CModalTitle>System Setup | Grade </CModalTitle>\n              </CModalHeader>\n              <CModalBody>\n                <form>\n                  <CRow>\n                    <CCol xs=\"12\" md=\"12\">\n                      <CCard>\n                        <CCardHeader>GRADE MANAGEMENT</CCardHeader>\n                        <CCardBody>\n                          <CForm\n                            action=\"\"\n                            method=\"post\"\n                            className=\"form-horizontal\"\n                          >\n                            <CFormGroup row>\n                              <CCol md=\"12\">\n                                <CInputGroup>\n                                  <CInputGroupPrepend>\n                                    <CButton type=\"InsName\" color=\"primary\">\n                                      <CIcon name=\"cil-magnifying-glass\" />\n                                    </CButton>\n                                  </CInputGroupPrepend>\n                                  <CInput\n                                    id=\"Grade\"\n                                    name=\"Grade\"\n                                    placeholder=\"Grade Name\"\n                                    value={grade}\n                                    onChange={(e) =>\n                                      setGrade(e.currentTarget.value)\n                                    }\n                                  />\n                                </CInputGroup>\n                              </CCol>\n                              <CCol md=\"12\" className=\"mt-3\">\n                                <CInputGroup>\n                                  <select\n                                    name=\"Levels\"\n                                    id=\"Levels\"\n                                    className=\"form-control col-6 mt-3\"\n                                    value={level}\n                                    onChange={handleLevelChange}\n                                  >\n                                    <option value=\"\">--Select Level--</option>\n                                    <option value=\"Management\">\n                                      Management\n                                    </option>\n                                    <option value=\"Senior\">Senior</option>\n                                    <option value=\"Middle\">Middle</option>\n                                    <option value=\"Junior\">Junior</option>\n                                  </select>\n                                </CInputGroup>\n                              </CCol>\n                            </CFormGroup>\n                          </CForm>\n                        </CCardBody>\n                      </CCard>\n                    </CCol>\n                  </CRow>\n                </form>\n              </CModalBody>\n              <CModalFooter>\n                <CButton color=\"success\" size=\"sm\" onClick={handleSubmit}>\n                  Save\n                </CButton>{\" \"}\n                <CButton\n                  color=\"warning\"\n                  size=\"sm\"\n                  onClick={() => setVisible(!visible)}\n                >\n                  Reset\n                </CButton>\n                <CButton\n                  color=\"danger\"\n                  size=\"sm\"\n                  onClick={() => setVisible(!visible)}\n                >\n                  Cancel\n                </CButton>\n              </CModalFooter>\n            </CModal>\n\n            <CCardBody>\n              {/* <CDataTable\n              items={dataTouse}\n              fields={fields}\n              dark\n              hover\n              striped\n              bordered\n              size=\"sm\"\n              itemsPerPage={20}\n              pagination\n              scopedSlots = {{\n                'Action':\n                  (item)=>(\n               \n                      \n                    <td>\n                      <tr>\n                      <CButton color=\"info\" size=\"sm\" onClick={(s)=>handleEditClicked(s)}>\n                  Edit\n                </CButton>\n\n\n<CButton color=\"danger\" size=\"sm\" onClick={() => setVisible(!visible)}>\nCancel\n</CButton>\n\n<CButton color=\"primary\" size=\"sm\" onClick={() => setVisible(!visible)}>\nCancel\n</CButton>\n</tr>\n\n</td>\n\n\n                \n                    \n                  )\n              }}\n            />*/}\n\n              <table className=\"table table-hover table-outline mb-0 d-none d-sm-table\">\n                <caption>Grades</caption>\n                <thead className=\"thead-light\">\n                  <tr>\n                    <th>Number</th>\n                    <th>Grade</th>\n                    <th>Action</th>\n                  </tr>\n                </thead>\n                <tbody className=\"\">\n                  {dataTouse.map((s, index) => (\n                    <tr key={s._id}>\n                      <td>{index + 1}</td>\n                      <td>{s.grade}</td>\n\n                      <td className=\"float-right\">\n                        <CButton\n                          color=\"info\"\n                          size=\"sm\"\n                          onClick={(s) => handleEditClicked(s)}\n                        >\n                          Edit\n                        </CButton>\n\n                        {/*<CButton color=\"primary\" size=\"sm\" onClick={(s)=>handleEditClicked(s)}>\n                  Edit\n                </CButton>\n                <CButton color=\"danger\" size=\"sm\" onClick={(s)=>handleEditClicked(s)}>\n                  Edit\n              </CButton>*/}\n                      </td>\n                      {/*<td>\n                    <button\n                      className=\"but btn-houReject\"\n                      onClick={() => handleShow(s)}\n                    >\n                      Reject\n                    </button>\n                  </td>*/}\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n              <p className=\"hou-p\">Showing {grades.length} Grades...</p>\n            </CCardBody>\n          </CCard>\n        </CCol>\n      </CRow>\n    </>\n  );\n};\n\nexport default GradeSetup;\n"],"sourceRoot":""}