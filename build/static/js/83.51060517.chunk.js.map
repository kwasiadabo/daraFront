{"version":3,"sources":["views/pages/reassignCustomer.jsx"],"names":["CustomerReAssign","useState","staff","setStaff","customers","setCustomers","render","setRender","officer","setOfficer","newOfficer","setNewOfficer","selected","setSelected","useEffect","a","axios","get","apiUrl","data","getStaff","loadCustomers","e","console","log","currentTarget","value","customer","schemaMap","Joi","number","required","label","results","object","handleSubmit","Swal","fire","length","map","s","post","ex","message","className","htmlFor","aria-label","onChange","key","id","nameOfStaff","type","onClick","c","index","Style","fullName","gender","idNumber","phone","residentialAddress","event","updatedList","target","checked","splice","indexOf","handleSelected"],"mappings":"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","file":"static/js/83.51060517.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from 'react'\nimport { Link, useHistory, useNavigate } from 'react-router-dom'\nimport axios from 'axios'\nimport moment from 'moment'\nimport { apiUrl, reportUrl } from '../../config.json'\nimport auth from '../../components/services/authService'\nimport Joi from 'joi-browser'\nimport Swal from 'sweetalert2'\nimport formData from 'form-data'\n\n//import '../../table.css'\n\n//import Pagination from '../pagination'\n//import { paginate } from '../paginate'\n\n//import { ComponentToPrint } from \"./ComponentToPrint\";\nimport {\n  CBadge,\n  CCard,\n  CCardBody,\n  //CCardHeader,\n  CCol,\n  CDataTable,\n  CRow,\n  CButton,\n  CModal,\n  CModalFooter,\n  CModalHeader,\n  CModalBody,\n  CCardHeader,\n  CInputGroupAppend,\n  CInputGroupPrepend,\n  CDropdownItem,\n  CForm,\n  //CCardFooter,\n  CDropdownToggle,\n  //CInputRadio,\n  CDropdown,\n  CModalTitle,\n  //CFormText,\n  //CTextarea,\n  CFormGroup,\n  CLabel,\n  // CSwitch,\n  CInput,\n  //CInputFile,\n  CSelect,\n  CDropdownMenu,\n  //CCardFooter,\n  CInputGroup,\n  ButtonDropdowns,\n  //CForm,\n  CDropdownDivider,\n  CInputCheckbox,\n  CLink,\n} from '@coreui/react'\n\nimport {\n  Row,\n  Col,\n  Table,\n  Progress,\n  Button,\n  UncontrolledButtonDropdown,\n  DropdownMenu,\n  DropdownToggle,\n  DropdownItem,\n  Input,\n  Label,\n  Badge,\n} from 'reactstrap'\nimport { GiConsoleController, GiCootieCatcher } from 'react-icons/gi'\n\nconst CustomerReAssign = () => {\n  const [staff, setStaff] = useState([])\n  const [customers, setCustomers] = useState([])\n  const [render, setRender] = useState(false)\n  const [officer, setOfficer] = useState(0)\n  const [newOfficer, setNewOfficer] = useState(0)\n  const [selected, setSelected] = useState([])\n\n  useEffect(() => {\n    async function getStaff() {\n      const staff = await axios.get(apiUrl + '/setup/staff')\n      setStaff(staff.data)\n    }\n    getStaff()\n  }, [render])\n\n  const loadCustomers = async (e) => {\n    console.log('Officer :' + e.currentTarget.value)\n    setOfficer(e.currentTarget.value)\n    //setNewOfficer(0)\n    const customer = await axios.get(\n      apiUrl + '/customer/officer/' + e.currentTarget.value,\n    )\n    setCustomers(customer.data)\n  }\n\n  const handleSelected = (event, c) => {\n    // console.log(c)\n    let updatedList = [...selected]\n    if (event.target.checked) {\n      updatedList = [\n        ...selected,\n        { customer: c.id, officer: officer, newOfficer: newOfficer },\n      ]\n    } else {\n      updatedList.splice(selected.indexOf(c), 1)\n    }\n    setSelected(updatedList)\n  }\n\n  const schemaMap = {\n    officer: Joi.number().required().label('Current Officer'),\n    newOfficer: Joi.number().required().label('New Officer'),\n    customer: Joi.number().required().label('Customer'),\n  }\n\n  const schema = Joi.object(schemaMap)\n  let results = ''\n  const validateForm = () => {\n    const result = Joi.validate(selected, schema)\n    if (result.error) {\n      return result.error.details[0].message\n    } else {\n      return null\n    }\n  }\n\n  const handleSubmit = async () => {\n    //console.log(selected)\n    if (newOfficer === 0)\n      return Swal.fire('OOPS!', 'New Officer Not Selected', 'error')\n    if (selected.length < 1) return\n    try {\n      selected.map(async (s) => {\n        results = await axios.post(apiUrl + '/customer/reassign', s)\n      })\n    } catch (ex) {\n      Swal.fire('OOPS!', ex.message, 'error')\n    }\n    console.log(results.length)\n    if (results.length >= 0) {\n      Swal.fire('Success!', 'Customers Re-assigned', 'success')\n      const customer = await axios.get(apiUrl + '/customer/officer/' + officer)\n      setCustomers(customer.data)\n    }\n    setSelected([])\n    setOfficer(0)\n    setNewOfficer(0)\n    setRender(!render)\n  }\n\n  return (\n    <div>\n      <div className=\"row\">\n        <CInputGroup className=\"mt-3\">\n          <CLabel htmlFor=\"phoneworship\" className=\"form-label col-sm-3\">\n            Current Assigned Officer *\n          </CLabel>\n          <CSelect\n            className=\"form-select col-sm-8\"\n            aria-label=\"Default select example\"\n            value={officer}\n            onChange={loadCustomers}\n          >\n            <option value=\"\">Current Officer *</option>\n            {staff.map((s) => (\n              <option key={s.id} value={s.id} id={s.id}>\n                {s.nameOfStaff}\n              </option>\n            ))}\n          </CSelect>\n        </CInputGroup>\n      </div>\n      <div className=\"row\">\n        <CInputGroup className=\"mt-3\">\n          <CLabel htmlFor=\"phoneworship\" className=\"form-label col-sm-3\">\n            New Assigned Officer *\n          </CLabel>\n          <CSelect\n            className=\"form-select col-sm-8\"\n            aria-label=\"Default select example\"\n            value={newOfficer}\n            onChange={(e) => {\n              console.log('new Officer: ' + e.currentTarget.value)\n              setNewOfficer(e.currentTarget.value)\n            }}\n          >\n            <option value=\"\">New Officer *</option>\n            {staff.map((s) => (\n              <option key={s.id} value={s.id} id={s.id}>\n                {s.nameOfStaff}\n              </option>\n            ))}\n          </CSelect>\n        </CInputGroup>\n\n        <CButton\n          type=\"submit\"\n          className=\"btn btn-success btn-block col-sm-2 float-right btn-sm mt-3 mb-3\"\n          onClick={handleSubmit}\n        >\n          + Assign\n        </CButton>\n      </div>\n\n      <div className=\"row mt-3\">\n        <Table className=\"table-sm\">\n          <thead>\n            <tr className=\"fs-sm\">\n              <th></th>\n              <th>Name</th>\n              <th>Gender</th>\n              <th>ID Number</th>\n              <th>Phone</th>\n              <th>Res. Address</th>\n              <th>Officer</th>\n              <th>Select</th>\n            </tr>\n          </thead>\n          <tbody>\n            {customers.map((c, index) => (\n              <tr\n                key={c.id}\n                // onClick={() => customerView(c)}\n                Style=\"cursor: pointer;\"\n              >\n                <td>{index + 1}</td>\n                <td>{c.fullName}</td>\n                <td>{c.gender}</td>\n                <td>{c.idNumber}</td>\n                <td>{c.phone}</td>\n                <td>{c.residentialAddress}</td>\n                <td>{c.nameOfStaff}</td>\n                <td>\n                  <input\n                    type=\"checkbox\"\n                    className=\"\"\n                    value={c.id}\n                    onChange={(event) => handleSelected(event, c)}\n                  />\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </Table>\n      </div>\n    </div>\n  )\n}\n\nexport default CustomerReAssign\n"],"sourceRoot":""}