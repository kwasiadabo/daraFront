{"version":3,"sources":["views/pages/collateralWithdrawal.jsx"],"names":["CollateralWithdrawal","useState","auth","getCurrentUser","user","customers","setCustomers","customerName","setCustomerName","show","setShow","showTransfer","setShowTransfer","render","setRender","search","setSearch","bal","setBal","loanBal","customer","amount","narration","entryBy","staff","deposit","setDeposit","navigate","useHistory","useEffect","a","axios","get","apiUrl","results","data","getCustomers","scustomers","filter","item","fullName","toLowerCase","includes","dataTouse","length","schemaMap","Joi","number","required","label","string","allow","schema","object","validateForm","result","validate","error","details","message","handleSubmit","Swal","fire","post","status","handleTransfer","Dr","formatter","Intl","NumberFormat","style","currency","handleAmountChanged","e","currentTarget","value","handleClose","className","type","name","id","onChange","event","target","placeholder","map","c","index","key","idNumber","phone","gender","nameOfStaff","format","Bal","color","size","onClick","handleGetCustomer","handleGetTransferCustomer","push","data-backdrop","data-keyboard","Header","Body","htmlFor","readOnly","autoComplete","Footer"],"mappings":"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","file":"static/js/63.2f4a058d.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport {\n  Link,\n  useNavigate,\n  Navigate,\n  useParams,\n  useHistory,\n} from 'react-router-dom'\nimport axios from 'axios'\nimport moment from 'moment'\nimport { Modal } from 'react-bootstrap'\nimport auth from '../../components/services/authService'\nimport Joi from 'joi-browser'\nimport Swal from 'sweetalert2'\nimport { apiUrl } from '../../config.json'\n\nimport {\n  Row,\n  Col,\n  Table,\n  Progress,\n  Button,\n  UncontrolledButtonDropdown,\n  DropdownMenu,\n  DropdownToggle,\n  DropdownItem,\n  Input,\n  Badge,\n  //Modal,\n} from 'reactstrap'\n\nimport {\n  CBadge,\n  CCard,\n  CCardBody,\n  //CCardHeader,\n  CCol,\n  CDataTable,\n  CRow,\n  CButton,\n  CModal,\n  CModalFooter,\n  CModalHeader,\n  CModalBody,\n  CCardHeader,\n  CInputGroupAppend,\n  CInputGroupPrepend,\n  CDropdownItem,\n  CForm,\n  //CCardFooter,\n  CDropdownToggle,\n  //CInputRadio,\n  CDropdown,\n  CDropdownDivider,\n  CModalTitle,\n  //CFormText,\n  //CTextarea,\n  CFormGroup,\n  CLabel,\n  // CSwitch,\n  CInput,\n  //CInputFile,\n  CSelect,\n  CDropdownMenu,\n  //CCardFooter,\n  CInputGroup,\n  //CForm,\n} from '@coreui/react'\n\nimport {\n  LineChart,\n  BarChart,\n  Line,\n  CartesianGrid,\n  XAxis,\n  YAxis,\n  Tooltip,\n  Bar,\n  Cell,\n  Label,\n  Legend,\n  ResponsiveContainer,\n} from 'recharts'\nimport { GiSatelliteCommunication } from 'react-icons/gi'\n\nconst CollateralWithdrawal = () => {\n  const [user, setUser] = useState(auth.getCurrentUser)\n  const [customers, setCustomers] = useState([])\n  const [customerName, setCustomerName] = useState('')\n  const [show, setShow] = useState(false)\n  const [showTransfer, setShowTransfer] = useState(false)\n  const [render, setRender] = useState(false)\n  const [sumPaid, setSumPaid] = useState(0)\n  const [sumWithdrawn, setSumWithdrawn] = useState(0)\n  const [search, setSearch] = useState('')\n  const [bal, setBal] = useState(0)\n  const [loanBal, setLoanBal] = useState(0)\n  const [deposit, setDeposit] = useState({\n    customer: 0,\n    amount: 0,\n    narration: '',\n    entryBy: user.staff,\n  })\n  const [pageSize, setPageSize] = useState(5)\n  const [currentPage, setCurrentPage] = useState(1)\n  let navigate = useHistory()\n\n  useEffect(() => {\n    async function getCustomers() {\n      const results = await axios.get(apiUrl + '/loan/cashcollateral/withbal')\n      setCustomers(results.data)\n    }\n    getCustomers()\n  }, [render])\n\n  const handleSearch = (event) => {\n    setSearch(event.target.value)\n  }\n\n  /*let customersList = customers.find(\n      (o) => o.fullName.toLowerCase() === search.toLowerCase()\n    );*/\n\n  //console.log(customersList);\n  // const allCustomers = paginate(customers, currentPage, pageSize)\n\n  const data = {\n    scustomers: customers.filter((item) =>\n      item.fullName.toLowerCase().includes(search.toLowerCase()),\n    ),\n  }\n\n  const dataTouse = search.length === 0 ? customers : data.scustomers\n\n  const schemaMap = {\n    customer: Joi.number().required().label('Customer'),\n    entryBy: Joi.number(),\n    narration: Joi.string().required().label('Narration'),\n    amount: Joi.number().allow('').label('Withdrawal Amount'),\n  }\n\n  const schema = Joi.object(schemaMap)\n\n  const validateForm = () => {\n    const result = Joi.validate(deposit, schema)\n    if (result.error) {\n      return result.error.details[0].message\n    } else {\n      return null\n    }\n  }\n\n  const handleSubmit = async () => {\n    const validate = validateForm()\n    if (validate !== null) {\n      return Swal.fire('OOPS', validate, 'error')\n    }\n    if (loanBal > 0) {\n      return Swal.fire(\n        'Withdrawal Failure',\n        'Customer has not completed loan Payment. Withdrawal NOT Possible',\n        'warning',\n      )\n    }\n\n    if (deposit.amount > bal) {\n      return Swal.fire(\n        'Withdrawal Failure',\n        'Insufficient Collateral Balance',\n        'warning',\n      )\n    }\n\n    if (!(deposit.amount > 0)) {\n      return Swal.fire(\n        'Withdrawal Failure',\n        'Invalid Withdrawal Amount',\n        'warning',\n      )\n    }\n\n    const results = await axios.post(\n      apiUrl + '/loan/cashcollateral/withdrawal',\n      deposit,\n    )\n    if (results.status === 200) {\n      Swal.fire(\n        'Success',\n        'Collateral withdrawal Successful, Pending Authorisation',\n        'success',\n      )\n      setDeposit({\n        customer: 0,\n        amount: 0,\n        entryBy: user.staff,\n        narration: '',\n      })\n      setRender(!render)\n      setShow(!show)\n    }\n  }\n\n  const handleTransfer = async () => {\n    const validate = validateForm()\n    if (validate !== null) {\n      return Swal.fire('OOPS', validate, 'error')\n    }\n\n    if (deposit.amount > bal) {\n      return Swal.fire(\n        'Transfer Failure',\n        'Insufficient Collateral Balance',\n        'warning',\n      )\n    }\n\n    if (!(deposit.amount > 0)) {\n      return Swal.fire('Tranfer Failure', 'Invalid Tranfer Amount', 'warning')\n    }\n\n    const results = await axios.post(apiUrl + '/loan/cashcollateral/tranfer', {\n      customer: deposit.customer,\n      Dr: deposit.amount,\n      narration: deposit.narration,\n      entryBy: user.staff,\n    })\n    if (results.status === 200) {\n      Swal.fire(\n        'Success',\n        'Collateral Tranfer Successful, Pending Authorisation',\n        'success',\n      )\n      setDeposit({\n        customer: 0,\n        amount: 0,\n        entryBy: user.staff,\n        narration: '',\n      })\n      setRender(!render)\n      setShowTransfer(!showTransfer)\n    }\n  }\n\n  let formatter = new Intl.NumberFormat('en-US', {\n    style: 'currency',\n    currency: 'GHS',\n\n    // These options are needed to round to whole numbers if that's what you want.\n    //minimumFractionDigits: 0, // (this suffices for whole numbers, but will print 2500.10 as $2,500.1)\n    //maximumFractionDigits: 0, // (causes 2500.99 to be printed as $2,501)\n  })\n\n  const handleAmountChanged = (e) => {\n    setDeposit({\n      ...deposit,\n      amount: e.currentTarget.value,\n    })\n  }\n\n  const handleClose = () => {\n    setDeposit({\n      customer: 0,\n      amount: 0,\n      entryBy: user.staff,\n      narration: '',\n    })\n    setShow(false)\n    setShowTransfer(false)\n  }\n\n  const handleGetCustomer = (c) => {\n    setCustomerName(c.fullName)\n    setBal(c.Bal)\n    setDeposit({ ...deposit, customer: c.id })\n    setShow(!show)\n  }\n\n  const handleGetTransferCustomer = (c) => {\n    setCustomerName(c.fullName)\n    setBal(c.Bal)\n    setDeposit({ ...deposit, customer: c.id })\n    setShowTransfer(!showTransfer)\n  }\n\n  return (\n    <div className=\"container-fluid\">\n      <div className=\"row\">\n        <div className=\"col-sm-12 mt-2\">\n          <div className=\"row justify-content-center\">\n            <h4 className=\"centertext mb-3\">Cash Collateral Activities</h4>\n          </div>\n          <CInput\n            type=\"text\"\n            name=\"searchCustomer\"\n            className=\"float-right col-sm-4 mb-3 mt-3\"\n            id=\"searchCustomer\"\n            value={null}\n            onChange={handleSearch}\n            placeholder=\"Search Customer\"\n          />\n          <p className=\"text-left\">\n            NB: The list shows only customers with collateral balances greater\n            than zero. i.e If customer does not have any balance, the details\n            will not be shown below.\n          </p>\n          <Table className=\"table-sm col-sm-12\">\n            <thead className=\"\">\n              <tr className=\"fs-sm\">\n                <th></th>\n                <th>ID</th>\n                <th>Name</th>\n                <th>Phone Number</th>\n                <th>Gender</th>\n                <th>Officer</th>\n                <th>Current Balance.</th>\n                <th></th>\n              </tr>\n            </thead>\n            <tbody>\n              {dataTouse.map((c, index) => (\n                <tr key={c.id}>\n                  <td>{index + 1}</td>\n                  <td>{c.idNumber}</td>\n                  <td>{c.fullName}</td>\n                  <td>{c.phone}</td>\n                  <td>{c.gender}</td>\n                  <td>{c.nameOfStaff}</td>\n                  <td>{formatter.format(c.Bal)}</td>\n                  <td>\n                    <CDropdown className=\"m-1\">\n                      <CDropdownToggle color=\"success\" size=\"sm\">\n                        Actions\n                      </CDropdownToggle>\n                      <CDropdownMenu size=\"sm\">\n                        <CDropdownDivider />\n                        <CDropdownItem onClick={() => handleGetCustomer(c)}>\n                          Withdrawal\n                        </CDropdownItem>\n                        <CDropdownDivider />\n                        <CDropdownItem\n                          onClick={() => handleGetTransferCustomer(c)}\n                        >\n                          Transfer\n                        </CDropdownItem>\n                        <CDropdownDivider />\n                        {/*<CDropdownItem\n                            onClick={() =>\n                              navigate.push('/loan/collateralloanpayment')\n                            }\n                          >\n                            Loan Repayment\n                        </CDropdownItem>\n                          <CDropdownDivider />*/}\n                      </CDropdownMenu>\n                    </CDropdown>\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </Table>\n        </div>\n        <CButton\n          onClick={() => navigate.push('/loan/viewcollateralwithdrawals')}\n          className=\"btn-sm float-left mt-3\"\n          color=\"info\"\n        >\n          View Withdrawals and Transfers\n        </CButton>\n      </div>\n      <Modal\n        className=\"fade col-sm-10\"\n        size=\"md\"\n        show={show}\n        data-backdrop=\"static\"\n        data-keyboard=\"false\"\n      >\n        <Modal.Header className=\"modal-header\">\n          <p>\n            <h3>Collateral Withdrawal</h3>\n          </p>\n        </Modal.Header>\n\n        <Modal.Body className=\"modal-body\">\n          <form>\n            <label htmlFor=\"dateOfCollection\" className=\"form-label\">\n              Customer Name\n            </label>\n            <CInput\n              type=\"text\"\n              name=\"customer\"\n              className=\"form-control text-center col-sm-12 mb-3\"\n              id=\"customer\"\n              value={customerName}\n              readOnly\n            />\n            <label htmlFor=\"balance\" className=\"form-label\">\n              Collateral Balance\n            </label>\n            <CInput\n              type=\"text\"\n              name=\"balance\"\n              className=\"form-control text-right col-sm-12 mb-3\"\n              id=\"balance\"\n              value={formatter.format(bal)}\n              readOnly\n            />\n\n            <label htmlFor=\"depositAmount\" className=\"form-label\">\n              Amount *\n            </label>\n            <CInput\n              autoComplete=\"off\"\n              type=\"text\"\n              name=\"depositAmount\"\n              className=\"form-control col-sm-12 mb-3\"\n              id=\"depositAmount\"\n              value={deposit.amount}\n              onChange={handleAmountChanged}\n            />\n\n            <label htmlFor=\"comment\" className=\"form-label\">\n              Comment\n            </label>\n            <CInput\n              autoComplete=\"off\"\n              type=\"text\"\n              name=\"comment\"\n              className=\"form-control  col-sm-12 mb-3\"\n              id=\"comment\"\n              value={deposit.narration}\n              onChange={(e) =>\n                setDeposit({\n                  ...deposit,\n                  narration: e.currentTarget.value,\n                })\n              }\n            />\n          </form>\n        </Modal.Body>\n        <Modal.Footer>\n          <CButton onClick={handleSubmit} className=\"btn-sm\" color=\"success\">\n            Submit\n          </CButton>\n          <Button onClick={handleClose} className=\"btn-sm\" color=\"danger\">\n            Close\n          </Button>\n        </Modal.Footer>\n      </Modal>\n\n      <Modal\n        className=\"fade col-sm-10\"\n        size=\"md\"\n        show={showTransfer}\n        data-backdrop=\"static\"\n        data-keyboard=\"false\"\n      >\n        <Modal.Header className=\"modal-header\">\n          <p>\n            <h3>Collateral Transfer</h3>\n          </p>\n        </Modal.Header>\n\n        <Modal.Body className=\"modal-body\">\n          <form>\n            <label htmlFor=\"dateOfCollection\" className=\"form-label\">\n              Customer Name\n            </label>\n            <CInput\n              type=\"text\"\n              name=\"customer\"\n              className=\"form-control text-center col-sm-12 mb-3\"\n              id=\"customer\"\n              value={customerName}\n              readOnly\n            />\n            <label htmlFor=\"balance\" className=\"form-label\">\n              Collateral Balance\n            </label>\n            <CInput\n              type=\"text\"\n              name=\"balance\"\n              className=\"form-control text-right col-sm-12 mb-3\"\n              id=\"balance\"\n              value={formatter.format(bal)}\n              readOnly\n            />\n\n            <label htmlFor=\"depositAmount\" className=\"form-label\">\n              Tranfer Amount *\n            </label>\n            <CInput\n              autoComplete=\"off\"\n              type=\"text\"\n              name=\"depositAmount\"\n              className=\"form-control col-sm-12 mb-3\"\n              id=\"depositAmount\"\n              value={deposit.amount}\n              onChange={handleAmountChanged}\n            />\n\n            <label htmlFor=\"comment\" className=\"form-label\">\n              Comment\n            </label>\n            <CInput\n              autoComplete=\"off\"\n              type=\"text\"\n              name=\"comment\"\n              className=\"form-control  col-sm-12 mb-3\"\n              id=\"comment\"\n              value={deposit.narration}\n              onChange={(e) =>\n                setDeposit({\n                  ...deposit,\n                  narration: e.currentTarget.value,\n                })\n              }\n            />\n          </form>\n        </Modal.Body>\n        <Modal.Footer>\n          <CButton onClick={handleTransfer} className=\"btn-sm\" color=\"success\">\n            Submit\n          </CButton>\n          <Button onClick={handleClose} className=\"btn-sm\" color=\"danger\">\n            Close\n          </Button>\n        </Modal.Footer>\n      </Modal>\n    </div>\n  )\n}\n\nexport default CollateralWithdrawal\n"],"sourceRoot":""}