{"version":3,"sources":["views/pages/paymentSchedules.jsx"],"names":["PaymentSchedule","useParams","disbursementId","customer","useState","render","paymentSchedule","setPaymentSchedule","fullName","setFullName","loanId","setLoanId","accountNumber","setAccountNumber","formatter","useHistory","Intl","NumberFormat","style","currency","useEffect","a","axios","get","apiUrl","results","data","getPaymentSchedule","totalAmt","reduce","i","dailyAmt","className","lg","format","map","c","index","key","idNumber","moment","paymentDate","dayNam","color","onClick","url","reportUrl","window","open"],"mappings":"0VAkLeA,UAnHS,WAAO,IAAD,EACSC,cAA7BC,EADoB,EACpBA,eAAgBC,EADI,EACJA,SADI,EAEAC,oBAAS,GAFT,mBAErBC,EAFqB,aAGkBD,mBAAS,KAH3B,mBAGrBE,EAHqB,KAGJC,EAHI,OAIIH,mBAAS,IAJb,mBAIrBI,EAJqB,KAIXC,EAJW,OAKAL,mBAAS,IALT,mBAKrBM,EALqB,KAKbC,EALa,OAMcP,mBAAS,IANvB,mBAMrBQ,EANqB,KAMNC,EANM,KAQxBC,GADaC,cACD,IAAIC,KAAKC,aAAa,QAAS,CAC7CC,MAAO,WACPC,SAAU,SAOZC,qBAAU,WAAM,4CACd,4BAAAC,EAAA,sEACwBC,IAAMC,IAC1BC,SACE,iCACAtB,EACA,IACAC,GANN,OACQsB,EADR,OAQElB,EAAmBkB,EAAQC,MAC3BjB,EAAYgB,EAAQC,KAAK,GAAGlB,UAC5BK,EAAiBY,EAAQC,KAAK,GAAGd,eACjCD,EAAUc,EAAQC,KAAK,GAAGhB,QAX5B,4CADc,uBAAC,WAAD,wBAcdiB,KAEC,CAACtB,IAEJ,IAAMuB,EAAWtB,EAAgBuB,QAAO,SAACR,EAAGS,GAC1C,OAAOT,EAAIS,EAAEC,WACZ,GAMH,OACE,yBAAKC,UAAU,mBACb,wBAAIA,UAAU,oBAAd,yBAEA,kBAAC,KAAD,KACE,kBAAC,IAAD,CAAMC,GAAI,IACR,kBAAC,IAAD,KAEE,4BAAQD,UAAU,mBAChB,+CAAqBpB,GACrB,wCAAcF,GACd,yCAAeF,IAIjB,kBAAC,IAAD,KACE,4BAAQwB,UAAU,oBAAlB,4BAC4BlB,EAAUoB,OAAON,IAE7C,kBAAC,IAAD,CAAOI,UAAU,wBACf,+BACE,wBAAIA,UAAU,SACZ,mCACA,oCACA,mCACA,4CACA,+BAGJ,+BACG1B,EAAgB6B,KAAI,SAACC,EAAGC,GAAJ,OACnB,wBAAIC,IAAKF,EAAEG,UACT,4BAAKF,EAAQ,GACb,4BAAKG,IAAOJ,EAAEK,aAAaP,OAAO,iBAClC,4BAAKE,EAAEM,QACP,4BAAK5B,EAAUoB,OAAOE,EAAEL,kBAMlC,yBAAKC,UAAU,aAQb,kBAAC,IAAD,CACEA,UAAU,wCACVW,MAAM,SACNC,QAAS,kBAxDWC,EA0DhBC,YACE,yBACA5C,EACA,IACAC,OA5DlB4C,OAAOC,KAAKH,EAAK,mBAAoB,QADd,yCADQ,IAACA,IAqDtB","file":"static/js/79.082a4a44.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { useParams, useHistory } from 'react-router-dom'\nimport axios from 'axios'\nimport moment from 'moment'\nimport Joi from 'joi-browser'\nimport CurrencyFormat from 'react-currency-format'\nimport Swal from 'sweetalert2'\nimport auth from '../../components/services/authService'\nimport { apiUrl } from '../../config.json'\nimport { reportUrl } from '../../config.json'\nimport '../../../src/schedulecards.css'\nimport {\n  Row,\n  Col,\n  Table,\n  Progress,\n  Button,\n  UncontrolledButtonDropdown,\n  DropdownMenu,\n  DropdownToggle,\n  DropdownItem,\n  Input,\n  Label,\n  Badge,\n} from 'reactstrap'\nimport {\n  CBadge,\n  CCard,\n  CCardBody,\n  //CCardHeader,\n  CCol,\n  CDataTable,\n  CRow,\n  CButton,\n  CModal,\n  CModalFooter,\n  CModalHeader,\n  CModalBody,\n  CCardHeader,\n  CInputGroupAppend,\n  CInputGroupPrepend,\n  CDropdownItem,\n  CForm,\n  //CCardFooter,\n  CDropdownToggle,\n  //CInputRadio,\n  CDropdown,\n  CDropdownDivider,\n  CModalTitle,\n  //CFormText,\n  //CTextarea,\n  CFormGroup,\n  CLabel,\n  // CSwitch,\n  CInput,\n  //CInputFile,\n  CSelect,\n  CDropdownMenu,\n  //CCardFooter,\n  CInputGroup,\n  //CForm,\n} from '@coreui/react'\n\nconst PaymentSchedule = () => {\n  const { disbursementId, customer } = useParams()\n  const [render, setRender] = useState(false)\n  const [paymentSchedule, setPaymentSchedule] = useState([])\n  const [fullName, setFullName] = useState('')\n  const [loanId, setLoanId] = useState('')\n  const [accountNumber, setAccountNumber] = useState('')\n  const navigate = useHistory()\n  let formatter = new Intl.NumberFormat('en-US', {\n    style: 'currency',\n    currency: 'GHS',\n\n    // These options are needed to round to whole numbers if that's what you want.\n    //minimumFractionDigits: 0, // (this suffices for whole numbers, but will print 2500.10 as $2,500.1)\n    //maximumFractionDigits: 0, // (causes 2500.99 to be printed as $2,501)\n  })\n\n  useEffect(() => {\n    async function getPaymentSchedule() {\n      const results = await axios.get(\n        apiUrl +\n          '/loan/booking/paymentschedule/' +\n          disbursementId +\n          '/' +\n          customer,\n      )\n      setPaymentSchedule(results.data)\n      setFullName(results.data[0].fullName)\n      setAccountNumber(results.data[0].accountNumber)\n      setLoanId(results.data[0].loanId)\n    }\n    getPaymentSchedule()\n    // console.log(paymentSchedule[0])\n  }, [render])\n\n  const totalAmt = paymentSchedule.reduce((a, i) => {\n    return a + i.dailyAmt\n  }, 0)\n\n  const openCustomerListAsReport = (url) => {\n    const windowFeatures = 'left=100,top=100,width=320,height=320'\n    window.open(url, 'Payment Schedule', 'popup', windowFeatures)\n  }\n  return (\n    <div className=\"container-fluid\">\n      <h4 className=\"mb-3 text-center\">Loan Payment Schedule</h4>\n\n      <CRow>\n        <CCol lg={12}>\n          <CCard>\n            {/*<CCardHeader className=\"text-right\">*/}\n            <strong className=\"float-right m-3\">\n              <p>Account Number : {accountNumber}</p>\n              <p>Loan ID : {loanId}</p>\n              <p>Customer : {fullName}</p>\n            </strong>\n            {/*</CCardHeader>*/}\n\n            <CCardBody>\n              <strong className=\"float-right mb-3\">\n                Total Payment Expected : {formatter.format(totalAmt)}\n              </strong>\n              <Table className=\"table-sm text-center\">\n                <thead>\n                  <tr className=\"fs-sm\">\n                    <th>No.</th>\n                    <th>Date</th>\n                    <th>Day</th>\n                    <th>Daily Amount</th>\n                    <th></th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {paymentSchedule.map((c, index) => (\n                    <tr key={c.idNumber}>\n                      <td>{index + 1}</td>\n                      <td>{moment(c.paymentDate).format('DD-MMMM-YYYY')}</td>\n                      <td>{c.dayNam}</td>\n                      <td>{formatter.format(c.dailyAmt)}</td>\n                    </tr>\n                  ))}\n                </tbody>\n              </Table>\n            </CCardBody>\n            <div className=\"col-sm-12\">\n              {/* <CButton\n                className=\"col-sm-2 btn-sm float-right mb-3 mr-3\"\n                color=\"success\"\n                onClick={window.print}\n              >\n                Print\n             </CButton>*/}\n              <CButton\n                className=\"col-sm-2 btn-sm float-right mb-3 mr-3\"\n                color=\"danger\"\n                onClick={() =>\n                  openCustomerListAsReport(\n                    reportUrl +\n                      '/paymentSchedule.aspx?' +\n                      disbursementId +\n                      '?' +\n                      customer,\n                  )\n                }\n              >\n                Show as Report\n              </CButton>\n            </div>\n          </CCard>\n        </CCol>\n      </CRow>\n    </div>\n  )\n}\n\nexport default PaymentSchedule\n"],"sourceRoot":""}