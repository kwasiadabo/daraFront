{"version":3,"sources":["views/pages/viewOfficerLoansDisbursed.jsx"],"names":["ViewOfficerLoansDisbursed","useState","loanDisbursed","setLoansDisbursed","auth","getCurrentUser","officer","Date","toISOString","slice","startDate","setStartDate","endDate","setEndDate","useEffect","a","console","log","staff","axios","get","apiUrl","results","data","viewLoanBookings","formatter","Intl","NumberFormat","style","currency","lg","className","type","onChange","e","currentTarget","value","color","onClick","url","reportUrl","window","open","map","c","index","key","id","tDate","Customer","loanId","format","principal","interestRate","processingFee"],"mappings":"4WAkNeA,UA3ImB,WAAO,IAAD,EACKC,mBAAS,IADd,mBAC/BC,EAD+B,KAChBC,EADgB,OAERF,mBAASG,IAAKC,gBAFN,mBAE/BC,EAF+B,aAGJL,oBAChC,IAAIM,MAAOC,cAAcC,MAAM,EAAG,MAJE,mBAG/BC,EAH+B,KAGpBC,EAHoB,OAMRV,oBAAS,IAAIM,MAAOC,cAAcC,MAAM,EAAG,KANnC,mBAM/BG,EAN+B,KAMtBC,EANsB,KAgBtCC,qBAAU,WAAM,4CACd,4BAAAC,EAAA,6DACEC,QAAQC,IAAIX,EAAQY,OADtB,SAEwBC,IAAMC,IAC1BC,SACE,6BACAX,EACA,IACAE,EACA,IACAN,EAAQY,OATd,OAEQI,EAFR,OAYEnB,EAAkBmB,EAAQC,MAZ5B,4CADc,uBAAC,WAAD,wBAgBdC,KACC,CAACd,EAAWE,IAEf,IAmBIa,EAAY,IAAIC,KAAKC,aAAa,QAAS,CAC7CC,MAAO,WACPC,SAAU,QAMZ,OACE,6BACE,kBAAC,KAAD,KACE,kBAAC,IAAD,CAAMC,GAAI,IACR,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAaC,UAAU,cACrB,yBAAKA,UAAU,OACb,2BAAOA,UAAU,OAAjB,cACA,kBAAC,IAAD,CACEC,KAAK,OACLD,UAAU,uBACVE,SA/Bc,SAACC,GAC7BvB,EAAauB,EAAEC,cAAcC,WAiCnB,yBAAKL,UAAU,OACb,2BAAOA,UAAU,OAAjB,YACA,kBAAC,IAAD,CACEC,KAAK,OACLD,UAAU,4BACVE,SApCY,SAACC,GAC3BrB,EAAWqB,EAAEC,cAAcC,WAsCjB,kBAAC,IAAD,CACEL,UAAU,kCACVM,MAAM,UACNC,QAAS,kBAtCWC,EAwChBC,YACE,+BACA9B,EACA,IACAE,EACA,IACAN,EAAQY,WA5C1BuB,OAAOC,KAAKH,EAAK,eAAgB,QADV,yCADQ,IAACA,IAmCtB,mBAkBF,wBAAIR,UAAU,oBAAd,+BACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOA,UAAU,YACf,+DACA,+BACE,wBAAIA,UAAU,SACZ,6BACA,oCACA,wCACA,sCACA,yCACA,wCACA,0CAGJ,+BACG7B,EAAcyC,KAAI,SAACC,EAAGC,GAAJ,OACjB,wBAAIC,IAAKF,EAAEG,IACT,4BAAKF,EAAQ,GACb,4BAAKD,EAAEI,OACP,4BAAKJ,EAAEK,UACP,4BAAKL,EAAEM,QACP,4BAAKzB,EAAU0B,OAAOP,EAAEQ,YACxB,4BAAK3B,EAAU0B,OAAOP,EAAES,eACxB,4BAAK5B,EAAU0B,OAAOP,EAAEU","file":"static/js/90.fdf6fa06.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { Modal } from 'react-bootstrap'\nimport { Link, useNavigate, Navigate, useHistory } from 'react-router-dom'\nimport axios from 'axios'\nimport moment from 'moment'\nimport Joi from 'joi-browser'\nimport CurrencyFormat from 'react-currency-format'\nimport Swal from 'sweetalert2'\nimport auth from '../../components/services/authService'\nimport { apiUrl } from '../../config.json'\nimport { reportUrl } from '../../config.json'\nimport BookProduct from './bookProduct'\nimport LoanPrincipal from './loanPrincipalEntry'\nimport Guarantors from './guarantors'\nimport GuarantorTwo from './guarantorTwo'\nimport BusinessDetails from './businessDetails'\nimport Directions from './directions'\nimport AdaboSelect from 'react-select'\nimport {\n  Row,\n  Col,\n  Table,\n  Progress,\n  Button,\n  UncontrolledButtonDropdown,\n  DropdownMenu,\n  DropdownToggle,\n  DropdownItem,\n  Input,\n  Label,\n  Badge,\n} from 'reactstrap'\nimport {\n  CBadge,\n  CCard,\n  CCardBody,\n  //CCardHeader,\n  CCol,\n  CDataTable,\n  CRow,\n  CButton,\n  CModal,\n  CModalFooter,\n  CModalHeader,\n  CModalBody,\n  CCardHeader,\n  CInputGroupAppend,\n  CInputGroupPrepend,\n  CDropdownItem,\n  CForm,\n  //CCardFooter,\n  CDropdownToggle,\n  //CInputRadio,\n  CDropdown,\n  CDropdownDivider,\n  CModalTitle,\n  //CFormText,\n  //CTextarea,\n  CFormGroup,\n  CLabel,\n  // CSwitch,\n  CInput,\n  //CInputFile,\n  CSelect,\n  CDropdownMenu,\n  //CCardFooter,\n  CInputGroup,\n  //CForm,\n} from '@coreui/react'\nimport { now } from 'moment'\n\nconst ViewOfficerLoansDisbursed = () => {\n  const [loanDisbursed, setLoansDisbursed] = useState([])\n  const [officer, setOfficer] = useState(auth.getCurrentUser)\n  const [startDate, setStartDate] = useState(\n    new Date().toISOString().slice(0, 10),\n  )\n  const [endDate, setEndDate] = useState(new Date().toISOString().slice(0, 10))\n\n  function formatDate(date) {\n    let newDate = new Date(date)\n    var year = newDate.getFullYear().toString()\n    var month = (newDate.getMonth() + 101).toString().substring(1)\n    var day = (newDate.getDate() + 100).toString().substring(1)\n    return year + '-' + month + '-' + day\n  }\n\n  useEffect(() => {\n    async function viewLoanBookings() {\n      console.log(officer.staff)\n      const results = await axios.get(\n        apiUrl +\n          '/loanreports/officerloans/' +\n          startDate +\n          '/' +\n          endDate +\n          '/' +\n          officer.staff,\n      )\n      //console.log('Officer: ' + officer.id)\n      setLoansDisbursed(results.data)\n      // setOfficer(auth.getCurrentUser)\n    }\n    viewLoanBookings()\n  }, [startDate, endDate])\n\n  const getBookedLoanDetails = async (c) => {\n    const results = await axios.get(\n      apiUrl + '/loanreports/portfolio' + startDate + '/' + endDate,\n    )\n    console.log(results.data)\n    setLoansDisbursed(results.data)\n  }\n  const handleStartDateChange = (e) => {\n    setStartDate(e.currentTarget.value)\n  }\n  const handleEndDateChange = (e) => {\n    setEndDate(e.currentTarget.value)\n  }\n\n  const openCustomerListAsReport = (url) => {\n    const windowFeatures = 'left=100,top=100,width=320,height=320'\n    window.open(url, 'Loan Details', 'popup', windowFeatures)\n  }\n\n  let formatter = new Intl.NumberFormat('en-US', {\n    style: 'currency',\n    currency: 'GHS',\n\n    // These options are needed to round to whole numbers if that's what you want.\n    //minimumFractionDigits: 0, // (this suffices for whole numbers, but will print 2500.10 as $2,500.1)\n    //maximumFractionDigits: 0, // (causes 2500.99 to be printed as $2,501)\n  })\n  return (\n    <div>\n      <CRow>\n        <CCol lg={12}>\n          <CCard>\n            <CCardHeader className=\"text-right\">\n              <div className=\"m-2\">\n                <label className=\"m-2\">Start Date</label>\n                <CInput\n                  type=\"date\"\n                  className=\"col-sm-3 float-right\"\n                  onChange={handleStartDateChange}\n                />\n              </div>\n              <div className=\"m-2\">\n                <label className=\"m-2\">End Date</label>\n                <CInput\n                  type=\"date\"\n                  className=\"col-sm-3 float-right ms-3\"\n                  onChange={handleEndDateChange}\n                />\n              </div>\n              <CButton\n                className=\"float-right m-3 col-sm-3 btn-sm\"\n                color=\"success\"\n                onClick={() =>\n                  openCustomerListAsReport(\n                    reportUrl +\n                      '/officerLoansDisbursed.aspx?' +\n                      startDate +\n                      '?' +\n                      endDate +\n                      '?' +\n                      officer.staff,\n                  )\n                }\n              >\n                View As Report\n              </CButton>\n            </CCardHeader>\n            <h4 className=\"text-center mt-3\">Disbursed Loans Per Officer</h4>\n            <CCardBody>\n              <Table className=\"table-sm\">\n                <caption>Disbursed Loans By Officer</caption>\n                <thead>\n                  <tr className=\"fs-sm\">\n                    <th></th>\n                    <th>Date</th>\n                    <th>Customer</th>\n                    <th>LoanId</th>\n                    <th>Principal</th>\n                    <th>Interest</th>\n                    <th>Proc.Fee</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {loanDisbursed.map((c, index) => (\n                    <tr key={c.id}>\n                      <td>{index + 1}</td>\n                      <td>{c.tDate}</td>\n                      <td>{c.Customer}</td>\n                      <td>{c.loanId}</td>\n                      <td>{formatter.format(c.principal)}</td>\n                      <td>{formatter.format(c.interestRate)}</td>\n                      <td>{formatter.format(c.processingFee)}</td>\n                    </tr>\n                  ))}\n                </tbody>\n              </Table>\n            </CCardBody>\n          </CCard>\n        </CCol>\n      </CRow>\n    </div>\n  )\n}\n\nexport default ViewOfficerLoansDisbursed\n"],"sourceRoot":""}