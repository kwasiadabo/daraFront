{"version":3,"sources":["views/pages/issueLoanCheque.jsx"],"names":["IssuedCheque","useState","show","setShow","activeLoan","setActiveLoan","render","setRender","customers","setCustomers","chequeNumber","setChequeNumber","cheques","setCheques","banks","setBanks","bankAccounts","setBankAccounts","issuedCheques","setIssuedCheques","nameOnCheque","bank","bankAccount","dateOnCheque","amount","issuedBy","status","bookingStatus","entryDate","Date","chequeData","setChequeData","toISOString","slice","startDate","setStartDate","endDate","setEndDate","user","auth","getCurrentUser","formatter","Intl","NumberFormat","style","currency","useEffect","a","axios","get","apiUrl","results","data","getCustomers","getBanks","getBankAccounts","getIssuedCheques","console","log","getCheques","schemaMap","Joi","number","required","label","date","string","any","schema","object","validateForm","result","validate","error","details","message","handleSubmit","Swal","fire","post","customerName","map","opt","fullName","accountNumber","value","id","handleCustomerSelected","optValue","length","today","toLocaleString","month","getDate","getFullYear","totalAmt","reduce","i","handleChequeNumberChange","e","currentTarget","scheques","filter","includes","filteredCheques","className","class","htmlFor","type","onChange","onClick","url","reportUrl","window","open","color","title","format","moment","c","index","key","showDenyButton","showCancelButton","confirmButtonText","denyButtonText","then","isConfirmed","delete","isDenied","handleDelete","size","data-backdrop","data-keyboard","onClose","closeButton","options","aria-label","defaultValue","b","for"],"mappings":"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","file":"static/js/70.1e295fdd.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { Modal } from 'react-bootstrap'\nimport { Link, useNavigate, Navigate } from 'react-router-dom'\nimport axios from 'axios'\nimport moment from 'moment'\nimport Joi from 'joi-browser'\nimport CurrencyFormat from 'react-currency-format'\nimport Swal from 'sweetalert2'\nimport auth from '../../components/services/authService'\nimport { apiUrl } from '../../config.json'\nimport { reportUrl } from '../../config.json'\nimport AdaboSelect from 'react-select'\nimport {\n  Row,\n  Col,\n  Table,\n  Progress,\n  Button,\n  UncontrolledButtonDropdown,\n  DropdownMenu,\n  DropdownToggle,\n  DropdownItem,\n  Input,\n  Label,\n  Badge,\n} from 'reactstrap'\nimport {\n  CBadge,\n  CCard,\n  CCardBody,\n  //CCardHeader,\n  CCol,\n  CDataTable,\n  CRow,\n  CButton,\n  CModal,\n  CModalFooter,\n  CModalHeader,\n  CModalBody,\n  CCardHeader,\n  CInputGroupAppend,\n  CInputGroupPrepend,\n  CDropdownItem,\n  CForm,\n  //CCardFooter,\n  CDropdownToggle,\n  //CInputRadio,\n  CDropdown,\n  CModalTitle,\n  //CFormText,\n  //CTextarea,\n  CFormGroup,\n  CLabel,\n  // CSwitch,\n  CInput,\n  //CInputFile,\n  CSelect,\n  CDropdownMenu,\n  //CCardFooter,\n  CInputGroup,\n  //CForm,\n  CLink,\n} from '@coreui/react'\n\nconst IssuedCheque = () => {\n  const [show, setShow] = useState(false)\n  const [activeLoan, setActiveLoan] = useState('')\n  const [render, setRender] = useState(false)\n  const [customers, setCustomers] = useState([])\n  const [chequeNumber, setChequeNumber] = useState('')\n  const [cheques, setCheques] = useState([])\n  const [buffer, setBuffer] = useState('')\n  const [banks, setBanks] = useState([])\n  const [bankAccounts, setBankAccounts] = useState([])\n  //const [user, setUser] = useState({})\n  const [issuedCheques, setIssuedCheques] = useState([])\n  //const [totalAmt, setTotalAmt] = useState(0)\n  const [chequeData, setChequeData] = useState({\n    nameOnCheque: '',\n    bank: 0,\n    bankAccount: 0,\n    dateOnCheque: '',\n    chequeNumber: '',\n    amount: '',\n    issuedBy: 0,\n    status: 'Not Disbursed',\n    bookingStatus: 'Not Booked',\n    entryDate: new Date(),\n  })\n\n  const [startDate, setStartDate] = useState(\n    new Date().toISOString().slice(0, 10),\n  )\n  const [endDate, setEndDate] = useState(new Date().toISOString().slice(0, 10))\n  const user = auth.getCurrentUser()\n\n  let formatter = new Intl.NumberFormat('en-US', {\n    style: 'currency',\n    currency: 'GHS',\n\n    // These options are needed to round to whole numbers if that's what you want.\n    //minimumFractionDigits: 0, // (this suffices for whole numbers, but will print 2500.10 as $2,500.1)\n    //maximumFractionDigits: 0, // (causes 2500.99 to be printed as $2,501)\n  })\n\n  useEffect(() => {\n    async function getCustomers() {\n      const results = await axios.get(apiUrl + '/customer')\n      setCustomers(results.data)\n    }\n    getCustomers()\n  }, [customers])\n\n  useEffect(() => {\n    async function getBanks() {\n      const results = await axios.get(apiUrl + '/setup/bank')\n      setBanks(results.data)\n      // setUser(auth.getCurrentUser)\n    }\n    getBanks()\n  }, [])\n\n  const handleBankChange = (e) => {\n    getBankAccounts(e.currentTarget.value)\n    setChequeData({\n      ...chequeData,\n      bank: e.currentTarget.value,\n    })\n  }\n\n  const getBankAccounts = async (bank) => {\n    const results = await axios.get(apiUrl + '/setup/bankaccount/' + bank)\n    setBankAccounts(results.data)\n  }\n\n  useEffect(() => {\n    async function getIssuedCheques() {\n      const results = await axios.get(\n        apiUrl + '/loan/issuedloancheques/' + startDate + '/' + endDate,\n      )\n      setIssuedCheques(results.data)\n    }\n    getIssuedCheques()\n    // console.log(issuedCheques)\n  }, [startDate, endDate, render])\n\n  useEffect(() => {\n    // setStartDate(new Date('2020-01-01'))\n    // setEndDate(new Date())\n    async function getCheques() {\n      const results = await axios.get(\n        apiUrl + '/loan/issuedloancheques/' + startDate + '/' + endDate,\n      )\n      setCheques(results.data)\n      console.log(results.data)\n    }\n    getCheques()\n    console.log(cheques)\n  }, [render])\n\n  // async function checkActiveLoan(customer) {\n  //   const results = await axios.get(\n  //     apiUrl + '/loan/issuedloancheques/checkactiveloan/' + customer,\n  //   )\n  //   return results.data\n  // }\n\n  const schemaMap = {\n    nameOnCheque: Joi.number().required().label('Name on Cheque'),\n    bank: Joi.number().required().label('Bank'),\n    bankAccount: Joi.number().required().label('Bank Account'),\n    dateOnCheque: Joi.date().required().label('Date On Cheque'),\n    chequeNumber: Joi.string().required().label('Cheque Number'),\n    amount: Joi.string().required().label('Amount'),\n    issuedBy: Joi.number().required(),\n    entryDate: Joi.date().required(),\n    status: Joi.string(),\n    bookingStatus: Joi.any(),\n  }\n  const schema = Joi.object(schemaMap)\n\n  const validateForm = () => {\n    const result = Joi.validate(chequeData, schema)\n    if (result.error) {\n      return result.error.details[0].message\n    } else {\n      return null\n    }\n  }\n\n  const handleSubmit = async () => {\n    //console.log(activeLoan)\n    if (activeLoan !== 0) {\n      return Swal.fire(\n        'OOPS!',\n        'Active Loan Detected - Customer is servicing an active loan',\n        'error',\n      )\n    }\n    const validate = validateForm()\n    if (validate !== null) {\n      return Swal.fire('Validation', validate, 'error')\n    }\n    try {\n      const results = await axios.post(\n        apiUrl + '/loan/issuedloancheques',\n        chequeData,\n      )\n      if (results.status !== 200) {\n        return Swal.fire(\n          'OOPs !',\n          'Submission Failed ! Check Entries and try again !',\n          'error',\n        )\n      } else {\n        Swal.fire('Good job!', 'Cheque Details Saved Successfully', 'success')\n        setRender(!render)\n        setChequeData({\n          nameOnCheque: '',\n          bank: 0,\n          bankAccount: '',\n          dateOnCheque: '',\n          chequeNumber: '',\n          amount: '',\n          issuedBy: 0,\n          status: 'Not Disbursed',\n          bookingStatus: 'Not Booked',\n          entryDate: new Date(),\n        })\n      }\n    } catch (err) {\n      Swal.fire('OOPS ! ' + err.message, 'error')\n    }\n  }\n\n  const handleDelete = (c) => {\n    Swal.fire({\n      title: 'Do you want to delete this issued Cheque?',\n      showDenyButton: true,\n      showCancelButton: true,\n      confirmButtonText: 'Yes',\n      denyButtonText: `No`,\n    }).then(async (result) => {\n      /* Read more about isConfirmed, isDenied below */\n      if (result.isConfirmed) {\n        await axios.delete(apiUrl + '/loan/issuedloancheques/' + c.id)\n        Swal.fire('Deletion Confirmed !', '', 'success')\n        setRender(!render)\n      } else if (result.isDenied) {\n        Swal.fire('Deletion NOT Confirmed', '', 'info')\n      }\n    })\n  }\n\n  const money = new Intl.NumberFormat('de-CH', {\n    style: 'currency',\n    currency: 'CHF',\n  })\n\n  const customerName = customers.map((opt) => ({\n    label: opt.fullName + ' - ' + opt.accountNumber,\n    value: opt.id,\n  }))\n\n  const handleCustomerSelected = async (opt) => {\n    const optValue = opt.value\n    setChequeData({ ...chequeData, nameOnCheque: optValue })\n    const results = await axios.get(\n      apiUrl + '/loan/issuedloancheques/checkactiveloan/' + optValue,\n    )\n    setActiveLoan(results.data.length)\n    // console.log(results.data.length)\n  }\n\n  var today = new Date()\n\n  // returns the month (from 0 to 11)\n  const month = today.toLocaleString('default', { month: 'long' })\n\n  // returns the day of the month (from 1 to 31)\n  const day = today.getDate()\n\n  // returns the year (four digits)\n  const year = today.getFullYear()\n\n  function add(accumulator, a) {\n    return accumulator + a\n  }\n\n  /* const totalAmt = filteredIssuedCheques.reduce((a, i) => {\n    return a + i.amount\n  }, 0)\n*/\n  /*const handleFilter = (startDate, endDate) => {\n    return issuedCheques.filter(\n      (i) => i.entryDate >= startDate && i.entryDate <= endDate,\n    )\n  }*/\n\n  // const filteredIssuedCheques = handleFilter(startDate, endDate)\n\n  const totalAmt = issuedCheques.reduce((a, i) => {\n    return a + i.amount\n  }, 0)\n\n  const handleStartDateChange = (e) => {\n    setStartDate(e.currentTarget.value)\n  }\n  const handleEndDateChange = (e) => {\n    setEndDate(e.currentTarget.value)\n  }\n  const openCustomerListAsReport = (url) => {\n    const windowFeatures = 'left=100,top=100,width=320,height=320'\n    window.open(url, 'customerlist', 'popup', windowFeatures)\n  }\n\n  const handleChequeNumberChange = async (e) => {\n    setChequeNumber(e.currentTarget.value)\n    // console.log(issuedCheques)\n  }\n\n  const data = {\n    scheques: issuedCheques.filter((i) =>\n      i.chequeNumber.includes(chequeNumber),\n    ),\n  }\n\n  const filteredCheques =\n    chequeNumber.length === 0 ? issuedCheques : data.scheques\n\n  return (\n    <div className=\"container-fluid\">\n      <div className=\"row justify-content-center\">\n        <h4 className=\"centertext mb-2\">Loan Cheques Issuance</h4>\n      </div>\n      <p className=\"centertext m-2 p\">\n        Issuing cheque means you are paying to someone. That's why your bank\n        should be credited as it reduces your bank balance.\n      </p>\n      <div className=\"mb-3\">\n        <div class=\"mb-3 row mt-5 col-sm-12\">\n          <CLabel htmlFor=\"dateOnCheque\" className=\"form-label\">\n            Start Date\n          </CLabel>\n          <div className=\"col-sm-3\">\n            <CInput\n              type=\"date\"\n              class=\"form-control\"\n              id=\"dateOnCheque\"\n              value={startDate}\n              onChange={handleStartDateChange}\n            />\n          </div>\n          <CLabel htmlFor=\"dateOnCheque\" className=\"form-label\">\n            End Date\n          </CLabel>\n          <div className=\"col-sm-3\">\n            <CInput\n              type=\"date\"\n              class=\"form-control\"\n              id=\"dateOnCheque\"\n              value={endDate}\n              onChange={handleEndDateChange}\n            />\n          </div>\n          <CLabel htmlFor=\"chequeNumber\" className=\"form-label\">\n            Cheque Number\n          </CLabel>\n          <div className=\"col-sm-3\">\n            <CInput\n              type=\"text\"\n              class=\"form-control\"\n              id=\"chequeNumber\"\n              value={chequeNumber}\n              onChange={handleChequeNumberChange}\n            />\n          </div>\n          <CLink\n            className=\"btn-block col-sm-3 float-left btn-sm mb-3 mt-3\"\n            onClick={() =>\n              openCustomerListAsReport(\n                reportUrl +\n                  '/issuedLoanCheques.aspx?' +\n                  startDate +\n                  '?' +\n                  endDate,\n              )\n            }\n          >\n            View as Report\n          </CLink>\n        </div>\n\n        <CButton\n          color=\"success\"\n          className=\"btn-sm float-right mb-3\"\n          onClick={() => setShow(!show)}\n          title=\"Make New Entry\"\n        >\n          + Issue Cheque\n        </CButton>\n\n        <div className=\"sm mt-3\">\n          Number of Cheques :{'  '}\n          <strong> {issuedCheques.length}</strong>\n        </div>\n        <div className=\"sm mt-3\">\n          Total of Amount (GHS) :{'  '}\n          <strong>{formatter.format(totalAmt)}</strong>\n        </div>\n\n        <Table className=\"table-lg\">\n          <caption>\n            Issued Cheques: {moment(startDate).format('DD-MMMM-YYYY')} -{' '}\n            {moment(endDate).format('DD-MMMM-YYYY')}\n          </caption>\n          <thead>\n            <tr className=\"fs-sm\">\n              <th></th>\n              <th>Name on Cheque</th>\n              <th>Bank</th>\n              <th>Bank Account</th>\n              <th>Date on Cheque</th>\n              <th>Cheque No.</th>\n              <th>Amount (GHC)</th>\n              <th>Issued By</th>\n              <th>Date Issued</th>\n              <th></th>\n            </tr>\n          </thead>\n          <tbody>\n            {filteredCheques.map((c, index) => (\n              <tr key={c.id}>\n                <td>{index + 1}</td>\n                <td>{c.nameOnCheque}</td>\n                <td>{c.bank}</td>\n                <td>{c.accountNumber}</td>\n                <td>{moment(c.dateOnCheque).format('DD-MMMM-YYYY')}</td>\n                <td>{c.chequeNumber}</td>\n                <td>{formatter.format(c.amount)}</td>\n                <td>{c.issuedBy}</td>\n                <td>{moment(c.entryDate).format('DD-MMMM-YYYY')}</td>\n                <td>\n                  {c.status === 'Not Disbursed' && (\n                    <CButton\n                      color=\"danger\"\n                      className=\"btn-sm\"\n                      onClick={() => handleDelete(c)}\n                      title=\"Cheques Issued Entry\"\n                    >\n                      Delete\n                    </CButton>\n                  )}\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </Table>\n      </div>\n\n      <CModal\n        className=\"modal fade col-sm-10\"\n        size=\"lg\"\n        show={show}\n        color=\"success\"\n        data-backdrop=\"static\"\n        data-keyboard=\"false\"\n        onClose={() => {\n          setShow(!show)\n        }}\n      >\n        <CModalHeader className=\"modal-header\" closeButton>\n          <p>\n            <h3 className=\"centertext\">ISSUE LOAN CHEQUE</h3>\n          </p>\n        </CModalHeader>\n\n        <CModalBody className=\"modal-body col-sm-12\">\n          <div class=\"mb-3 row\">\n            <CLabel\n              htmlFor=\"nameOfCustomer\"\n              className=\"col-sm-3 col-form-label\"\n            >\n              Name of Customer\n            </CLabel>\n            <div class=\"col-sm-8\">\n              <AdaboSelect\n                className=\"form-control-xl mb-2 mt-2\"\n                options={customerName}\n                onChange={handleCustomerSelected}\n              />\n              {/*<CInput\n                type=\"text\"\n                class=\"form-control\"\n                id=\"nameOfCustomer\"\n                value={chequeData.nameOnCheque}\n                autoComplete=\"off\"\n                onChange={(e) =>\n                  setChequeData({\n                    ...chequeData,\n                    nameOnCheque: e.currentTarget.value,\n                    issuedBy: user.id,\n                  })\n                }\n              />*/}\n            </div>\n          </div>\n\n          <div class=\"mb-3 row\">\n            <CLabel htmlFor=\"bank\" className=\"col-sm-3 col-form-label\">\n              Bank\n            </CLabel>\n            <div class=\"col-sm-8\">\n              <CSelect\n                id=\"bank\"\n                className=\"form-select\"\n                aria-label=\"Default select example\"\n                value={chequeData.bank}\n                onChange={handleBankChange}\n              >\n                <option defaultValue=\"\">--Select Bank--</option>\n                {banks.map((b) => (\n                  <option key={b.id} value={b.id} id={b.id}>\n                    {b.bank}\n                  </option>\n                ))}\n              </CSelect>\n            </div>\n          </div>\n\n          <div class=\"mb-3 row\">\n            <CLabel for=\"bankAccount\" class=\"col-sm-3 col-form-label\">\n              Bank Account\n            </CLabel>\n            <div class=\"col-sm-8\">\n              <CSelect\n                id=\"bankAccount\"\n                className=\"form-select\"\n                aria-label=\"Default select example\"\n                value={chequeData.bankAccount}\n                onChange={(e) =>\n                  setChequeData({\n                    ...chequeData,\n                    bankAccount: e.currentTarget.value,\n                    issuedBy: user.id,\n                  })\n                }\n              >\n                <option defaultValue=\"\">--Select Bank Account--</option>\n                {bankAccounts.map((b) => (\n                  <option key={b.id} value={b.id} id={b.id}>\n                    {b.accountNumber}\n                  </option>\n                ))}\n              </CSelect>\n            </div>\n          </div>\n\n          <div class=\"mb-3 row\">\n            <CLabel htmlFor=\"dateOnCheque\" className=\"col-sm-3 col-form-label\">\n              Date on Cheque\n            </CLabel>\n            <div className=\"col-sm-8\">\n              <CInput\n                type=\"date\"\n                class=\"form-control\"\n                id=\"dateOnCheque\"\n                value={chequeData.dateOnCheque}\n                onChange={(e) =>\n                  setChequeData({\n                    ...chequeData,\n                    dateOnCheque: e.currentTarget.value,\n                  })\n                }\n              />\n            </div>\n          </div>\n          <div className=\"mb-3 row\">\n            <CLabel htmlFor=\"chequeNumber\" className=\"col-sm-3 col-form-label\">\n              Cheque No.\n            </CLabel>\n            <div className=\"col-sm-8\">\n              <CInput\n                type=\"text\"\n                className=\"form-control\"\n                id=\"chequeNumber\"\n                value={chequeData.chequeNumber}\n                onChange={(e) =>\n                  setChequeData({\n                    ...chequeData,\n                    chequeNumber: e.currentTarget.value,\n                  })\n                }\n              />\n            </div>\n          </div>\n          <div class=\"mb-3 row\">\n            <CLabel htmlFor=\"amount\" className=\"col-sm-3\">\n              Amount (GHS)\n            </CLabel>\n            <div class=\"col-sm-8\">\n              <CInput\n                id=\"amount\"\n                className=\"form-control\"\n                type=\"text\"\n                value={chequeData.amount}\n                onChange={(e) =>\n                  setChequeData({\n                    ...chequeData,\n                    amount: e.currentTarget.value,\n                  })\n                }\n              />\n            </div>\n          </div>\n        </CModalBody>\n\n        <CModalFooter>\n          <div className=\"justify-content-center\">\n            <CButton onClick={handleSubmit} className=\"m-3\" color=\"success\">\n              Submit\n            </CButton>\n            <CButton\n              onClick={() => setShow(!show)}\n              className=\"m-3\"\n              color=\"danger\"\n            >\n              Close\n            </CButton>\n          </div>\n        </CModalFooter>\n      </CModal>\n    </div>\n  )\n}\n\nexport default IssuedCheque\n"],"sourceRoot":""}