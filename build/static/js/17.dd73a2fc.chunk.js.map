{"version":3,"sources":["views/charts/ChartLineSimple.js","views/charts/ChartBarSimple.js","views/widgets/WidgetsDropdown.js"],"names":["ChartLineSimple","props","borderColor","backgroundColor","pointHoverBackgroundColor","dataPoints","label","pointed","attributes","pointHoverColor","defaultDatasets","data","getColor","pointBackgroundColor","pointedOptions","scales","xAxes","offset","gridLines","color","zeroLineColor","ticks","fontSize","fontColor","yAxes","display","min","Math","apply","max","elements","line","borderWidth","point","radius","hitRadius","hoverRadius","straightOptions","defaultOptions","options","Object","assign","maintainAspectRatio","legend","computedDatasets","deepObjectsMerge","datasets","computedOptions","labels","defaultProps","ChartBarSimple","barPercentage","categoryPercentage","WidgetsDropdown","useState","count","setCount","payments","setPayments","setOfficers","countDefaulters","activeLoan","setActiveLoan","render","useEffect","a","axios","get","apiUrl","results","CustomersCount","officer","active","getCustomerCount","ExpectedPayments","expectedPayments","formatter","Intl","NumberFormat","style","currency","sm","lg","header","text","footerSlot","className","height","format","tension","caret","name","placement","onClick","url","reportUrl","window","open"],"mappings":"2NAKMA,EAAkB,SAAAC,GAAU,IAG9BC,EAOED,EAPFC,YACAC,EAMEF,EANFE,gBACAC,EAKEH,EALFG,0BACAC,EAIEJ,EAJFI,WACAC,EAGEL,EAHFK,MACAC,EAEEN,EAFFM,QACGC,EAT0B,YAU3BP,EAV2B,8FAYzBQ,EACAL,IAE2B,gBAApBD,EACFA,EAEFD,GAGHQ,EACG,CACL,CACEC,KAAMN,EACNH,YAAaU,mBAASV,GACtBC,gBAAiBS,mBAAST,GAC1BU,qBAAsBD,mBAASH,GAC/BL,0BAA2BQ,mBAASH,GACpCH,UAKAQ,EACG,CACLC,OAAQ,CACNC,MAAO,CACL,CACEC,QAAQ,EACRC,UAAW,CACTC,MAAO,cACPC,cAAe,eAEjBC,MAAO,CACLC,SAAU,EACVC,UAAW,iBAIjBC,MAAO,CACL,CACEC,SAAS,EACTJ,MAAO,CACLI,SAAS,EACTC,IAAKC,KAAKD,IAAIE,MAAMD,KAAMtB,GAAc,EACxCwB,IAAKF,KAAKE,IAAID,MAAMD,KAAMtB,GAAc,MAKhDyB,SAAU,CACRC,KAAM,CACJC,YAAa,GAEfC,MAAO,CACLC,OAAQ,EACRC,UAAW,GACXC,YAAa,KAMfC,EACG,CACLtB,OAAQ,CACNC,MAAO,CAAC,CACNS,SAAS,IAEXD,MAAO,CAAC,CACNC,SAAS,KAGbK,SAAU,CACRC,KAAM,CACJC,YAAa,GAEfC,MAAO,CACLC,OAAQ,EACRC,UAAW,GACXC,YAAa,KAMfE,EAAkB,WACtB,IAAMC,EAAUhC,EAAUO,EAAiBuB,EACzC,OAAOG,OAAOC,OAAO,GAAIF,EAAS,CAChCG,qBAAqB,EACrBC,OAAQ,CACNlB,SAAS,KALO,GAUlBmB,EACGC,2BAAiBnC,EAAiBF,EAAWsC,UAAY,IAG5DC,EACGF,2BAAiBP,EAAgB9B,EAAW+B,SAAW,IAKhE,OACE,kBAAC,IAAD,iBACM/B,EADN,CAEEsC,SAAUF,EACVL,QAASQ,EACTC,OAAQ1C,MAiBdN,EAAgBiD,aAAe,CAC7B/C,YAAa,wBACbC,gBAAiB,cACjBE,WAAY,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IACzDC,MAAO,SAGMN,O,+EClJTkD,EAAiB,SAAAjD,GAAU,IAG7BE,EAMEF,EANFE,gBACAC,EAKEH,EALFG,0BACAC,EAIEJ,EAJFI,WACAC,EAGEL,EAHFK,MAEGE,GACDP,EAFFM,QAP4B,YAS1BN,EAT0B,iFAWxBS,EACG,CACL,CACEC,KAAMN,EACNF,gBAAiBS,mBAAST,GAC1BC,0BAA2BQ,mBAASR,GACpCE,MAAOA,EACP6C,cAAe,GACfC,mBAAoB,IAKpBd,EACG,CACLI,qBAAqB,EACrBC,OAAQ,CACNlB,SAAS,GAEXV,OAAQ,CACNC,MAAO,CAAC,CACNS,SAAS,IAEXD,MAAO,CAAC,CACNC,SAAS,MAOjB,OACE,kBAAC,IAAD,iBACMjB,EADN,CAEEsC,SAAUpC,EACV6B,QAASD,EACTU,OAAQ1C,MAgBd4C,EAAeD,aAAe,CAC5B9C,gBAAiB,iBACjBE,WAAY,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IACzDC,MAAO,SAGM4C,O,uKCoIAG,UA5LS,WAAO,IAAD,EACFC,mBAAS,GADP,mBACrBC,EADqB,KACdC,EADc,OAEIF,mBAAS,GAFb,mBAErBG,EAFqB,KAEXC,EAFW,OAGIJ,mBAAS,IAHb,mBAGXK,GAHW,aAIkBL,mBAAS,GAJ3B,mBAIrBM,EAJqB,aAKQN,mBAAS,IALjB,mBAKrBO,EALqB,KAKTC,EALS,OAOAR,oBAAS,GAPT,mBAOrBS,EAPqB,UAS5BC,qBAAU,WAAM,4CACd,gCAAAC,EAAA,sEACwBC,IAAMC,IAAIC,SAAS,iCAD3C,cACQC,EADR,OAEEb,EAASa,EAAQ1D,KAAK,GAAG2D,gBAF3B,SAIwBJ,IAAMC,IAAIC,SAAS,0BAJ3C,cAIQG,EAJR,OAKEZ,EAAYY,EAAQ5D,MALtB,UAYuBuD,IAAMC,IACzBC,SAAS,6CAbb,QAYQI,EAZR,OAeEV,EAAcU,EAAO7D,KAAK,GAAG6D,QAf/B,6CADc,uBAAC,WAAD,wBAkBdC,KACC,CAACV,IAEJC,qBAAU,WAAM,4CACd,4BAAAC,EAAA,sEACyBC,IAAMC,IAC3BC,SAAS,mCAFb,OACQX,EADR,OAIEC,EAAYD,EAAS9C,KAAK,GAAG+D,kBAJ/B,4CADc,uBAAC,WAAD,wBAOdC,KAEC,CAACZ,IAEJ,IAAIa,EAAY,IAAIC,KAAKC,aAAa,QAAS,CAC7CC,MAAO,WACPC,SAAU,QAUZ,OACE,kBAAC,KAAD,KACE,kBAAC,IAAD,CAAMC,GAAG,IAAIC,GAAG,KACd,kBAAC,KAAD,CACE/D,MAAM,mBACNgE,OAAQ5B,EACR6B,KAAK,YACLC,WACE,kBAAC,IAAD,CACE9E,SAAO,EACP+E,UAAU,4BACVP,MAAO,CAAEQ,OAAQ,QACjBlF,WAAY,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IACrCD,0BAA0B,UAC1BE,MAAM,YACN0C,OAAO,aAkBf,kBAAC,IAAD,CAAMiC,GAAG,IAAIC,GAAG,KACd,kBAAC,KAAD,CACE/D,MAAM,gBACNgE,OAAQP,EAAUY,OAAO/B,GACzB2B,KAAK,gBACLC,WACE,kBAAC,IAAD,CACE9E,SAAO,EACP+E,UAAU,YACVP,MAAO,CAAEQ,OAAQ,QACjBlF,WAAY,CAAC,EAAG,GAAI,EAAG,GAAI,GAAI,GAAI,IACnCD,0BAA0B,OAC1BmC,QAAS,CAAET,SAAU,CAAEC,KAAM,CAAE0D,QAAS,QACxCnF,MAAM,WACN0C,OAAO,cAkBf,kBAAC,IAAD,CAAMiC,GAAG,IAAIC,GAAG,KACd,kBAAC,KAAD,CACE/D,MAAM,mBACNgE,OAAQtB,EACRuB,KAAK,eACLC,WACE,kBAAC,IAAD,CACEC,UAAU,OACVP,MAAO,CAAEQ,OAAQ,QACjBpF,gBAAgB,uBAChBE,WAAY,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IACrCkC,QAAS,CAAET,SAAU,CAAEC,KAAM,CAAEC,YAAa,OAC5C5B,0BAA0B,UAC1BE,MAAM,UACN0C,OAAO,cAkBf,kBAAC,IAAD,CAAMiC,GAAG,IAAIC,GAAG,KACd,kBAAC,KAAD,CACE/D,MAAM,kBACNgE,OAAQvB,EACRwB,KAAK,aACLC,WACE,kBAAC,IAAD,CACEC,UAAU,YACVP,MAAO,CAAEQ,OAAQ,QACjBpF,gBAAgB,qBAChBG,MAAM,UACN0C,OAAO,YAIX,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAiB0C,OAAK,EAACJ,UAAU,aAAanE,MAAM,eAClD,kBAAC,IAAD,CAAOwE,KAAK,kBAEd,kBAAC,IAAD,CAAeL,UAAU,OAAOM,UAAU,cACxC,kBAAC,IAAD,eACA,kBAAC,IAAD,CACEC,QAAS,kBA3HWC,EA4HOC,YAAY,wBA1HnDC,OAAOC,KAAKH,EAAK,kBAAmB,QADb,yCADQ,IAACA,IA0HtB","file":"static/js/17.dd73a2fc.chunk.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport { getColor, deepObjectsMerge } from '@coreui/utils'\nimport { CChartLine } from '@coreui/react-chartjs'\n\nconst ChartLineSimple = props => {\n\n  const {\n    borderColor,\n    backgroundColor,\n    pointHoverBackgroundColor,\n    dataPoints,\n    label,\n    pointed,\n    ...attributes\n  } = props\n\n  const pointHoverColor = (()=>{\n    if (pointHoverBackgroundColor) {\n      return pointHoverBackgroundColor\n    } else if (backgroundColor !== 'transparent') {\n      return backgroundColor\n    }\n    return borderColor\n  })()\n\n  const defaultDatasets = (()=>{\n    return [\n      {\n        data: dataPoints,\n        borderColor: getColor(borderColor),\n        backgroundColor: getColor(backgroundColor),\n        pointBackgroundColor: getColor(pointHoverColor),\n        pointHoverBackgroundColor: getColor(pointHoverColor),\n        label\n      }\n    ]\n  })()\n\n  const pointedOptions = (()=>{\n    return {\n      scales: {\n        xAxes: [\n          {\n            offset: true,\n            gridLines: {\n              color: 'transparent',\n              zeroLineColor: 'transparent'\n            },\n            ticks: {\n              fontSize: 2,\n              fontColor: 'transparent'\n            }\n          }\n        ],\n        yAxes: [\n          {\n            display: false,\n            ticks: {\n              display: false,\n              min: Math.min.apply(Math, dataPoints) - 5,\n              max: Math.max.apply(Math, dataPoints) + 5\n            }\n          }\n        ]\n      },\n      elements: {\n        line: {\n          borderWidth: 1\n        },\n        point: {\n          radius: 4,\n          hitRadius: 10,\n          hoverRadius: 4\n        }\n      }\n    }\n  })()\n\n  const straightOptions = (()=>{\n    return {\n      scales: {\n        xAxes: [{\n          display: false\n        }],\n        yAxes: [{\n          display: false\n        }]\n      },\n      elements: {\n        line: {\n          borderWidth: 2\n        },\n        point: {\n          radius: 0,\n          hitRadius: 10,\n          hoverRadius: 4\n        }\n      }\n    }\n  })()\n\n  const defaultOptions = (()=>{\n    const options = pointed ? pointedOptions : straightOptions\n      return Object.assign({}, options, {\n        maintainAspectRatio: false,\n        legend: {\n          display: false\n        }\n      })\n  })()\n\n  const computedDatasets = (() => {\n    return deepObjectsMerge(defaultDatasets, attributes.datasets || {})\n  })()\n\n  const computedOptions = (() => {\n    return deepObjectsMerge(defaultOptions, attributes.options || {})\n  })()\n\n  // render\n\n  return (\n    <CChartLine\n      {...attributes}\n      datasets={computedDatasets}\n      options={computedOptions}\n      labels={label}\n    />\n  )\n}\n\nChartLineSimple.propTypes = {\n  tag: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n  className: PropTypes.string,\n  //\n  borderColor: PropTypes.string,\n  backgroundColor: PropTypes.string,\n  pointHoverBackgroundColor: PropTypes.string,\n  dataPoints: PropTypes.array,\n  label: PropTypes.string,\n  pointed: PropTypes.bool\n};\n\nChartLineSimple.defaultProps = {\n  borderColor: 'rgba(255,255,255,.55)',\n  backgroundColor: 'transparent',\n  dataPoints: [10, 22, 34, 46, 58, 70, 46, 23, 45, 78, 34, 12],\n  label: 'Sales'\n};\n\nexport default ChartLineSimple\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { getColor } from '@coreui/utils'\nimport { CChartBar } from '@coreui/react-chartjs'\n\nconst ChartBarSimple = props => {\n\n  const {\n    backgroundColor,\n    pointHoverBackgroundColor,\n    dataPoints,\n    label,\n    pointed,\n    ...attributes\n  } = props\n\n  const defaultDatasets = (()=>{\n    return [\n      {\n        data: dataPoints,\n        backgroundColor: getColor(backgroundColor),\n        pointHoverBackgroundColor: getColor(pointHoverBackgroundColor),\n        label: label,\n        barPercentage: 0.5,\n        categoryPercentage: 1\n      }\n    ]\n  })()\n\n  const defaultOptions = (()=>{\n    return {\n      maintainAspectRatio: false,\n      legend: {\n        display: false\n      },\n      scales: {\n        xAxes: [{\n          display: false\n        }],\n        yAxes: [{\n          display: false\n        }]\n      }\n    }\n  })()\n\n  // render\n  return (\n    <CChartBar\n      {...attributes}\n      datasets={defaultDatasets}\n      options={defaultOptions}\n      labels={label}\n    />\n  )\n}\n\nChartBarSimple.propTypes = {\n  tag: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n  className: PropTypes.string,\n  //\n  backgroundColor: PropTypes.string,\n  pointHoverBackgroundColor: PropTypes.string,\n  dataPoints: PropTypes.array,\n  label: PropTypes.string,\n  pointed: PropTypes.bool\n};\n\nChartBarSimple.defaultProps = {\n  backgroundColor: 'rgba(0,0,0,.2)',\n  dataPoints: [10, 22, 34, 46, 58, 70, 46, 23, 45, 78, 34, 12],\n  label: 'Sales'\n};\n\nexport default ChartBarSimple\n","import React from 'react'\nimport { useState, useEffect, useRef } from 'react'\nimport axios from 'axios'\nimport moment from 'moment'\nimport { apiUrl, reportUrl } from '../../config.json'\nimport {\n  CWidgetDropdown,\n  CRow,\n  CCol,\n  CDropdown,\n  CDropdownMenu,\n  CDropdownItem,\n  CDropdownToggle,\n} from '@coreui/react'\nimport CIcon from '@coreui/icons-react'\nimport ChartLineSimple from '../charts/ChartLineSimple'\nimport ChartBarSimple from '../charts/ChartBarSimple'\n\nconst WidgetsDropdown = () => {\n  const [count, setCount] = useState(0)\n  const [payments, setPayments] = useState(0)\n  const [officers, setOfficers] = useState([])\n  const [countDefaulters, setCountDefaulters] = useState(0)\n  const [activeLoan, setActiveLoan] = useState(0)\n\n  const [render, setRender] = useState(false)\n\n  useEffect(() => {\n    async function getCustomerCount() {\n      const results = await axios.get(apiUrl + '/customer/count/customerCount')\n      setCount(results.data[0].CustomersCount)\n\n      const officer = await axios.get(apiUrl + '/customer/officers/off')\n      setOfficers(officer.data)\n\n      // const defaulters = await axios.get(\n      //   apiUrl + '/loan/dailycollections/count/defaultersCount',\n      // )\n      // setCountDefaulters(defaulters.data)\n\n      const active = await axios.get(\n        apiUrl + '/loan/dailycollections/active/activeLoans',\n      )\n      setActiveLoan(active.data[0].active)\n    }\n    getCustomerCount()\n  }, [render])\n\n  useEffect(() => {\n    async function expectedPayments() {\n      const payments = await axios.get(\n        apiUrl + '/loan/dailycollections/expected',\n      )\n      setPayments(payments.data[0].ExpectedPayments)\n    }\n    expectedPayments()\n    // console.log(officers)\n  }, [render])\n  // render\n  let formatter = new Intl.NumberFormat('en-US', {\n    style: 'currency',\n    currency: 'GHS',\n\n    // These options are needed to round to whole numbers if that's what you want.\n    //minimumFractionDigits: 0, // (this suffices for whole numbers, but will print 2500.10 as $2,500.1)\n    //maximumFractionDigits: 0, // (causes 2500.99 to be printed as $2,501)\n  })\n  const openCustomerListAsReport = (url) => {\n    const windowFeatures = 'left=100,top=100,width=320,height=320'\n    window.open(url, 'Vault Statement', 'popup', windowFeatures)\n  }\n  return (\n    <CRow>\n      <CCol sm=\"6\" lg=\"3\">\n        <CWidgetDropdown\n          color=\"gradient-primary\"\n          header={count}\n          text=\"Customers\"\n          footerSlot={\n            <ChartLineSimple\n              pointed\n              className=\"c-chart-wrapper mt-3 mx-3\"\n              style={{ height: '70px' }}\n              dataPoints={[89, 59, 84, 84, 51, 55, 40]}\n              pointHoverBackgroundColor=\"primary\"\n              label=\"Customers\"\n              labels=\"Month\"\n            />\n          }\n        >\n          {/*<CDropdown>\n            <CDropdownToggle color=\"transparent\">\n              <CIcon name=\"cil-settings\" />\n            </CDropdownToggle>\n            <CDropdownMenu className=\"pt-0\" placement=\"bottom-end\">\n              <CDropdownItem>Action</CDropdownItem>\n              <CDropdownItem>Another action</CDropdownItem>\n              <CDropdownItem>Something else here...</CDropdownItem>\n              <CDropdownItem disabled>Disabled action</CDropdownItem>\n            </CDropdownMenu>\n          </CDropdown>*/}\n        </CWidgetDropdown>\n      </CCol>\n\n      <CCol sm=\"6\" lg=\"3\">\n        <CWidgetDropdown\n          color=\"gradient-info\"\n          header={formatter.format(payments)}\n          text=\"Exp. Payments\"\n          footerSlot={\n            <ChartLineSimple\n              pointed\n              className=\"mt-3 mx-3\"\n              style={{ height: '70px' }}\n              dataPoints={[1, 18, 9, 17, 34, 22, 11]}\n              pointHoverBackgroundColor=\"info\"\n              options={{ elements: { line: { tension: 0.00001 } } }}\n              label=\"Payments\"\n              labels=\"months\"\n            />\n          }\n        >\n          {/*<CDropdown>\n            <CDropdownToggle caret={false} color=\"transparent\">\n              <CIcon name=\"cil-location-pin\" />\n            </CDropdownToggle>\n            <CDropdownMenu className=\"pt-0\" placement=\"bottom-end\">\n              <CDropdownItem>Action</CDropdownItem>\n              <CDropdownItem>Another action</CDropdownItem>\n              <CDropdownItem>Something else here...</CDropdownItem>\n              <CDropdownItem disabled>Disabled action</CDropdownItem>\n            </CDropdownMenu>\n          </CDropdown>*/}\n        </CWidgetDropdown>\n      </CCol>\n\n      <CCol sm=\"6\" lg=\"3\">\n        <CWidgetDropdown\n          color=\"gradient-warning\"\n          header={activeLoan}\n          text=\"Active Loans\"\n          footerSlot={\n            <ChartLineSimple\n              className=\"mt-3\"\n              style={{ height: '70px' }}\n              backgroundColor=\"rgba(255,255,255,.2)\"\n              dataPoints={[78, 81, 80, 45, 34, 12, 40]}\n              options={{ elements: { line: { borderWidth: 2.5 } } }}\n              pointHoverBackgroundColor=\"warning\"\n              label=\"Members\"\n              labels=\"months\"\n            />\n          }\n        >\n          {/*<CDropdown>\n            <CDropdownToggle color=\"transparent\">\n              <CIcon name=\"cil-settings\" />\n            </CDropdownToggle>\n            <CDropdownMenu className=\"pt-0\" placement=\"bottom-end\">\n              <CDropdownItem>Action</CDropdownItem>\n              <CDropdownItem>Another action</CDropdownItem>\n              <CDropdownItem>Something else here...</CDropdownItem>\n              <CDropdownItem disabled>Disabled action</CDropdownItem>\n            </CDropdownMenu>\n          </CDropdown>*/}\n        </CWidgetDropdown>\n      </CCol>\n\n      <CCol sm=\"6\" lg=\"3\">\n        <CWidgetDropdown\n          color=\"gradient-danger\"\n          header={countDefaulters}\n          text=\"Defaulters\"\n          footerSlot={\n            <ChartBarSimple\n              className=\"mt-3 mx-3\"\n              style={{ height: '70px' }}\n              backgroundColor=\"rgb(250, 152, 152)\"\n              label=\"Members\"\n              labels=\"months\"\n            />\n          }\n        >\n          <CDropdown>\n            <CDropdownToggle caret className=\"text-white\" color=\"transparent\">\n              <CIcon name=\"cil-settings\" />\n            </CDropdownToggle>\n            <CDropdownMenu className=\"pt-0\" placement=\"bottom-end\">\n              <CDropdownItem>Action</CDropdownItem>\n              <CDropdownItem\n                onClick={() =>\n                  openCustomerListAsReport(reportUrl + '/defaulters.aspx')\n                }\n              >\n                View List\n              </CDropdownItem>\n              {/*<CDropdownItem>Something else here...</CDropdownItem>\n              <CDropdownItem disabled>Disabled action</CDropdownItem>*/}\n            </CDropdownMenu>\n          </CDropdown>\n        </CWidgetDropdown>\n      </CCol>\n    </CRow>\n  )\n}\n\nexport default WidgetsDropdown\n"],"sourceRoot":""}